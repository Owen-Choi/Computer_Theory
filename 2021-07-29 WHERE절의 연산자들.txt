등가 비교 연산자

	등가 비교 연산은 말 그래도 같은지 다른지를 비교하는 연산이다.
	대표적으로 우리가 잘 아는 =, != 이 있다. 
	그리고 != 기호와 같은 의미를 지니는 <>, ^= 기호도 있다.

	ex) SELECT *
		FROM EMP
	    WHERE SAL != 3000 ( == WHERE SAL <> 3000 == WHERE SAL ^= 3000)

논리 부정 연산자

	논리 부정 연산자 NOT은 말 그래도 뒤에 오는 연산의 결과를 부정한다.
	
	ex) SELECT *
		FROM EMP
	    WHERE NOT SAL = 3000;
	
	*보통 NOT 연산자를 대소/등가 비교 연산자에 직접 사용하는 경우는 드물다고 한다.
	보통은 IN, BETWEEN, IS NULL 연산자와 함께 복합적으로 사용한다고 한다.

		논리 부정 연산자의 경우 복잡한 조건식에서 정 반대의 결과를 얻고자할 때 유용하다.
		일일이 조건식을 다 수정할 필요 없이 조건식 전체를 묶고 앞에 NOT 연산자를 사용하면 되기 때문.

IN 연산자

	만약 EMP 테이블에서 직업이 매니저, 외판원, 사무원 중 하나라면 모두 출력되게 하고싶다면 SQL문은 다음과 같다.
	
	SELECT *
		FROM EMP
	WHERE JOB = 'MANAGER'
		OR JOB = 'SALESMAN'
		OR JOB = 'CLERK';
	
	결과값은 옳지만 이렇게 되면 조건이 늘어날수록 조건식을 많이 작성해야 한다.
	이때 IN 연산자를 사용하면 특정 열에 해당하는 데이터의 조건을 여러 개 작성할 수 있다.

	ex) SELECT *
		FROM EMP
	     WHERE JOB IN ('MANAER', 'SALESMAN', 'CLERK');

	조건을 부정할 때도 마찬가지이다. 만약 특정 열에서 조건식에 해당하는 데이터만 제외하고 출력하고싶다면
	NOT 연산자를 활용하면 된다.

	ex) SELECT *
		FROM EMP
	     WHERE JOB NOT IN ('MANAGER', 'SALESMAN', 'CLERK');

	위치에 유의하자. WHERE NOT JOB IN 이 아니다.

BETWEEN A AND B

	BETWEEN 연산자는 특정 열에 해당하는 데이터의 조건의 범위를 정할 수 있다.
	만약 BETWEEN 문을 사용하지 않는다면 SQL문은 다음과 같다.

	SELECT *
		FROM EMP
	WHERE SAL >= 2000
		AND SAL <=3000;
	
	마찬가지로 SQL문이 복잡해 질 수 있는데, BETWEEN 문을 사용하면 간단하게 만들 수 있다.

	SELECT *
		FROM EMP
	WHERE SAL (NOT) BETWEEN 2000 AND 3000;	
	마찬가지로 NOT 연산자도 위와 같이 사용할 수 있다.
	
LIKE 연산자와 와일드 카드

	LIKE 연산자는 일부 문자열이 포함된 데이터를 검색하는 데 사용하는 연산자이다.
	
	ex) SELECT *
		FROM EMP
	    WHERE ENAME LIKE 'S%';
	
	여기서 %는 와일드 카드이다.

		와일드 카드
		
			와일드 카드란 특정 문자 또는 문자열을 대체하거나 문자열 데이터의 패턴을 표기하는
			특수 문자이다. LIKE 연산자와 함께 사용할 수 있는 와일드 카드는 다음과 같다.

				-  : 어떤 값이든 상관없이 한 개의 문자 데이터를 의미
				% : 길이와 상관없이(문자가 없는 경우도 포함) 모든 문자 데이터를 의미
	
	만약 2번째 글자가 L인 사원만을 출력하고 싶다면 SQL문은 다음과 같다.

	SELECT *
		FROM EMP
	WHERE ENAME LIKE '_L%';

	만약 문자열 'AM'이 포함된 데이터를 조회하고 싶은데 위치를 모르겠다면 다음과 같이 명령어를 작성하면 된다.
	WHERE ENAME (NOT) LIKE '%AM%';

	* 만약 데이터 이름에 와일드 카드로 사용되는 문자가 포함된다면?
		A_A 처럼 데이터 이름에 와일드 카드 문자가 포함되는 경우에는 다음과 같이 명령어를 작성하면 된다.
			SELECT *
				FROM SOME_TABLE
			WHERE SOME_COLUMN LIKE 'A\_A' ESCAPE '\';
		
		** ESCAPE 문자로 지정한 \는 개발자가 원하는 문자로 변경 가능하다.
		실무에서는 그렇게 자주 쓰는 문법은 아니라고 한다.
			
	LIKE 문과 SELECT 문은 데이터 조회 성능과 관련하여 다양한 의견이 있다고 한다.
	일하게 될 곳에 따라 사용할 수도, 사용하지 않을 수도 있으니 이 점 참고하기.

	