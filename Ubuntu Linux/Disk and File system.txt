현재 리눅스의 파일 시스템은 XFS(eXtended File System)이다.
현재는 XFS이고, 과거에는 ext 시리즈를 사용하였다.
/proc/filesystems 디렉토리에는 현재 커널이 지원하는 파일 시스템의 종류를 알려준다.
여기서 nodev(no device?)란 해당 파일 시스템이 디스크와 같은 블록 장치와 연결돼있지 않음을, 즉 가상 파일 시스템임을 뜻한다.

우리가 아는 디렉토리의 계층 구조는 여러 개의 파일 시스템으로 이루어졌을 수 있다.
즉 usr 디렉토리의 파일 시스템과 home 디렉토리의 파일 시스템이 서로 다들 수 있음.

그리고 마운트란 디렉토리 계층 구조 상의 특정 디렉토리와 파일 시스템을 연결하는 것.
(실제 파일이 저장되어 있는 파일 시스템은 디렉토리 계층 구조에 연결되어야 사용자가 접근 가능하기 때문이다.)
여기서 "특정 디렉토리"를 마운트 포인트라고 한다.

/etc/fstab 파일의 내부에는 파일 시스템의 마운트 설정 정보가 저장된다.

마운트 관련 명령어는 mount, umount(언마운트)가 있다.
	둘 다 mount(umount) [옵션] [장치명 또는 마운트 포인트]의 형식을 가진다.	
	mount만 사용할 경우 현재 마운트 되어 있는 정보를 출력하는데, 이 정보는 /etc/mtab 파일의 내용과 동일하다.
	USB 등을 사용할 때 마운트를 사용한다.
	
	USB를 사용하려면 특정 디렉토리에 마운트해서 사용해야 하는 것 같다.
	윈도우용 USB의 메모리를 /mnt 디렉토리에 마운트하는 과정은 다름과 같다.
	1. sudo fdisk -l  명령어를 사용해서 USB 메모리의 장치명을 확인한다. 
	2. USB 메모리에 파티션을 생성해야 한다.
		2.1 fdisk 명령어를 사용한다. ex : sudo fdisk /dev/sdb
		2.2 fdisk 이후 뜨는 창에서 n을 입력한다. (새 파티션 생성)
		2.3 생성할 파티션의 번호를 지정하고 시작 섹터와 마지막 섹터를 지정한다.
		2.4 p를 입력하여 파티션이 제대로 설정 되었는지 확인한다.
	(리눅스용 USB만?)
	3. 생성한 파티션을 포맷하여 파일 시스템을 생성
		sudo mke2fs -t ext4 /dev/sdb1
	4. USB 마운트
		sudo mount -t vfat /dev/sdb1 /mnt

	완벽히 다 이해하지는 못했지만, 요점은 마운트를 통해서 특정 디렉토리에(마운트 포인트에) 파일 시스템을 적용할 수 있다는 것.
	USB도 추측하건데 USB로 활용될 디렉토리를 정해서 거기에 파일 시스템을 적용하는 것 같다.

	디스크에 추가 설치도 비슷한 맥락이다.
	새 디스크 장착 -> 디스크 파티션 나누기 -> 파티션에 파일 시스템 생성(포맷) -> 디스크 마운트 (생성한 파일 시스템과 디렉토리 계층 구조 연결)
	
	디스크 장치의 이름에 대하여 : 
		리눅스에서 IDE 컨트롤러에 연결된 디스크는 /dev/hd로 시작한다.
		SCSI나 SATA 컨트롤러에 장착된 디스크는 /dev/sd로 시작하는 이름을 주로 사용하는데, 최근에는 IDE, SCSI 등 구분 없이
		모두 /dev/sd로 시작한다고 한다.

		컨트롤러에 연결되는 디스크의 순서에 따라 알파벳이 붙는다.
		ex)
			/dev/sda : 첫번째 디스크
			/dev/sdb : 두번째 디스크
			/dev/sdc : 세번째 디스크
		
		여기서 파티션을 또 나눈 경우는 뒤에 숫자를 붙여서 표시한다.
		ex)
			/dev/sda1 : 첫번째 디스크의 첫번째 파티션

	USB 사용에서 접했던 fdisk 명령어에 대해서 알아보겠다.

		fdisk : 디스크의 파티션 생성, 삭제, 보기 등 파티션을 관리한다.
		fdisk [옵션] [장치명]

		옵션이 정말 많은데 우리는 이걸 다 외울 수 없어요. 
		요점은 fdisk가 디스크 파티션을 관장하는 명령어라는 것.

	파일 시스템 생성

		마찬가지로 USB 사용에서 접했다.
		mkfs : 리눅스 파일 시스템을 만든다.
		mke2fs : 리눅스 개정판 확장 파일 시스템(ext2, ext3, ext4)을 만든다.
		
		마찬가지로 옵션이 정말 많은데 우리는 이것을 다 외울 수 없다.
		요점은 파일 시스템 생성이 저 2가지 명령어를 통해 이루어진다는 것.

	df : 디스크의 남은 공간에 대한 정보를 출력한다. (-h : 알기 쉬운 단위로 출력)
	du : 디렉토리나 사용자별 디스크 사용량을 출력한다. 