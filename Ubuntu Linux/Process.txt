프로세스란 현재 시스템에서 실행중인 프로그램.

	부팅 과정에서 실행되는 systemd, kthreadd 프로세스를 제외한 모든 프로세스는 부모 프로세스를 가지고있다.
	PID란 프로세스의 번호.
	프로세스의 종류는 다음과 같다.
		
		데몬 프로세스 : 특정 서비스를 제공하기 위해 존재하며 리눅스 커널에 의해 실행된다.
		고아 프로세스 : 자식 프로세스가 실행중일 때 부모 프로세스가 종료되면 이 자식 프로세스는 고아가 된다.
		좀비 프로세스 : 실행을 종료했음에도 프로세스 테이블 목록에 남아 있는 경우.
				defunct 프로세스라고 표현하기도 한다.

	ps : 현재 실행 중인 프로세스의 목록 조회
		ps 명령어에는 다양한 옵션이 있는데, 유닉스 옵션, BSD 옵션, GNU 옵션이 있다.
		유닉스 옵션 : 다른 명령어와 같이, 하이픈으로 시작한다. ex: ps -ef
		BSD 옵션 : 하이픈으로 시작하지 않는다. ex : ps a
		GNU 옵션 : 붙임표 두개로 시작한다. ex : ps --pid

		<유닉스 옵션>
		-e : 실행중인 모든 프로세스의 정보를 출력한다.
		-f : 프로세스의 자세한 정보를 출력한다.
		-u uid : 특정 사용자에 대한 모든 프로세스의 정보를 출력한다.
		-p pid : pid로 지정한 특정 프로세스의 정보를 출력한다.

		<BSD 옵션>
		a : 터미널에서 실행한 프로세스의 정보를 출력한다.
		u : 프로세스 소유자 이름, CPU 사용량, 메모리 사용량 등 상세 정보를 출력한다.
		x : 시스템에서 실행 중인 모든 프로세스의 정보를 출력한다.

		<GNU 옵션>
		--pid PID 목록 : 목록으로 지정한 특정 PID의 정보를 출력한다.
	핵심은 ps 명령어.

		ps -f (프로세스 상세 정보) 명령어 입력의 결과는 다음과 같다.
			UID : 프로세스를 실행한 사용자의 ID
			PID : 프로세스 번호
			PPID : 부모 프로세스 번호
			C : CPU 사용량 (%값)
			STIME : 프로세스의 시작 날짜나 시간
			TTY : 프로세스가 실행된 터미널의 종류와 번호 (TTY가 ?인 프로세스는 대부분 데몬 프로세스이다. )
				시스템이 실행하였기 때문에 터미널 정보를 확인할 수 없는 것.
			TIME : 프로세스 실행 시간
			CMD : 실행되고 있는 프로그램 이름(명령어 이름)

특정 프로세스 정보 검색하기
	
	특정 파일에서 패턴을 검색하는 명령어는 grep이었다.
	프로세스에서도 비슷하게 pgrep이라는 명령어가 있다.
		pgrep [옵션] 패턴 : 지정한 패턴과 일치하는 프로세스 정보를 출력한다.
		옵션으로는 다음과 같은 값들이 온다.
			-x : 패턴과 정확히 일치하는 프로세스의 정보를 출력한다.
			-n : 패턴을 포함하고 있는 가장 최근 프로세스의 정보를 출력한다.
			-u [사용자명] : 특정 사용자에 대한 모든 프로세스를 출력한다.
			-l : PID와 프로세스 이름을 출력한다.
			-t term : 특정 단말기와 관련된 프로세스의 정보를 출력한다.
		ex : pgrep -x bash
		
	pgrep을 사용하지 않고 ps 명령어와 연계해서 찾을 수도 있다.
		ex : ps -ef | grep bash

	시그널 : 프로세스에 무언가 발생했음을 알리는 간단한 메세지이다.
		kill -l 명령어로 시그널의 목록을 조회할 수 있다.

	kill : 지정한 시그널을 프로세스에 보낸다.
		kill [-시그널] PID
			kill -9 1001 : 1001번 프로세스에게 9번 시그널, 즉 강제종료 시그널을 보낸다.
			PID 확인은 ps 명령어와 pgrep 명령어를 통해 확인할 수 있다.
		
		만약 man 이라는 프로세스 명령 이름을 가지는 프로세스를 종료하고 싶다면, 2가지 방법이 있다.
		첫번째 방법은 ps -fp $(pgrep -x man)을 통해 PID를 확인하고 kill 을 사용해서 종료하는 방법
		두번째 방법은 pkill 명령어를 통해 바로 종료하는 방법.

			pkill : 프로세스의 명령 이름(CMD)으로 프로세스를 찾아서 종료해주는 명령어.
				pkill man : man이라는 이름의 프로세스를 찾아서 종료시킨다.

	top : 현재 실행 중인 프로세스에 대한 정보를 주기적으로 출력한다.

포그라운드 프로세스와 백그라운드 프로세스

	포그라운드 프로세스
		사용자가 입력한 명령이 실행되어 결과가 출력될 때까지 기다려야 한다.
		sleep 100 : sleep 명령이 끝나야 다른 명령을 실행할 수 있다.
	
	백그라운드 프로세스 
		명령의 처리가 끝나는 것과 관계없이 곧바로 프롬프트가 출력되어 사용자가 다른 작업을 계속할 수 있다.
		sleep 100 & : sleep 명령이 실행되는 동안 다른 명령을 실행할 수 있다. 
			sleep  명령의 시작과 끝에 알림을 보낸다.

작업 제어

	작업 제어는 크게 세가지로 나뉜다.
	작업 전환, 작업 일시 중지, 작업 종료이다.
		작업 전환 : 포그라운드 -> 백그라운드, 혹은 백그라운드 -> 포그라운드
		작업 일시 중지 : 작업을 잠시 중단
		작업 종료 : 프로세스를 종료하는 것처럼 작업을 종료

	jobs : 백그라운드 작업을 모두 보여준다.
		jobs [%작업번호] : 작업번호에 해당하는 작업의 정보만 보여준다.
		jobs [%+] 또는 jobs[%%] : 작업 순서가 +인 작업 정보를 출력한다.
		jobs [%-] : 작업 순서가 -인 작업 정보를 출력한다.

		여기서 작업 순서란?
			+ : 가장 최근에 접근한 작업
			- : +작업 바로 직전에 접근한 작업
			공백 : 그 외의 작업들

	jobs 명령을 실행하면 작업 번호, 작업 순서, 상태, 명령(이름)을 순서대로 출력한다.

	작업 전환 : 
		bg [%작업 번호] : 작업 번호가 지시하는 작업을 백그라운드 작업으로 전환한다.
		fg [%작업 번호] : 작업 번호가 지시하는 작업을 포그라운드 작업으로 전환한다.

	작업 종료 : 
		Ctrl + c : 포그라운드 작업은 대부분 이를 통해 종료할 수 있다.
		백그라운드 작업의 경우 kill 명령 + PID 혹은 %작업번호로 종료할 수 있다. 