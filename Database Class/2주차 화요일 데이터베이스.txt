SQL : 

	Structed Query Language
	
	relation algebra는 어떻게보면 이론적인것, sql은 실무에서 사용하는 것.
	sql로 표현할 수 있는 범위는 알제브라보다 훨씬 넓다.
	SQL은 정말정말 많이 쓰인다. 꼭 잘 익힐 것.
	
	<TMI>
	시퀄 : Sequel이라고도 부른다.
	ANSI, ISO에서 표준화를 하였다.
	현재 SQL-92를 세계에서 가장 많이 쓰는데, 이 양은 엄청나게 방대하다.
	Commercial systems : 실제 시스템에서 사용되는 데이터베이스는 방대한 양에서 자기들이 쓰는 기능을 위주로 업데이트.
	따라서 표준과는 좀 다를 수 있다~~

	웹 어플리케이션에서 많이 사용되는 LAMP : Linux, Apache, Mysql, PHP
	
MYSQL
	personal database : 윈도우에서 마치 폴더처럼 데이터베이스를 관리하는 시스템(mysql, mydb...)
	mysql 5.5 32bit 버전 설치
	mysql> COMMIT; : 저장의 개념, 이 명령어를 쳐주어야 변동사항이 저장이 된다. 일단 commit이 된 건 바꿀 수 없다.
	(반대의 명령어는 rollback)	
	mysql>USE MYDB; : mydb라는 personal database로 들어감
	mysql> SHOW DATABASES; : 현재 내가 가지고 있는 personal database가 무엇인지 보여줌.  
	mysql> DELETE DATABASE MYDB : mydb라는 personal database를 지운다. 그런데 mydb안에 테이블이 있으면 지워지지 않는다.		//DDL의 DROP TABLE 연산을 먼저 해줘야 하는 듯 하다.
															//테이블 역시 tuple이 있으면 지울 수 없다. SELECT * from TABLE_NAME으로 tuple을 지워주자.
	따라서 테이블을 지워준 뒤 꼭 COMMIT을 해주자.
	
	SHOW TABLES : 사용하고 있는 personal database에 있는 테이블들을 보여준다.
	

	DDL : 테이블들에 대한 정보를 명시할 수 있음. 
		릴레이션의 스키마
		각각의 속성의 도메인 값
		무결성 제약조건
		
		indexes : 검색을 빠르게 해주기 위한 것? 정확히 못들었다....
		릴레이션에 관한 보안과 권한 정보
		데이터를 실질적으로 어떻게 디스크에 저장을 할지
		등을 DDL을 통해 정의할 수 있다.


	Domain types in SQL		// 데이터 타입
		
		char(n) - 고정 길이(n)의 문자열, n은 당연히 지정 가능(예를 들어 학번처럼 길이가 정해져있는 값)
		varchar(n) - 최대 길이가 n인 가변길이의 문자열 : 사용한 만큼 길이가 늘어난다.
		int - 정수
		numeric(p,d) - 자리수 p, 소숫점 이하 자리수 d, 즉 numeric(3,1) 이면 44.5는 되지만 444.5는 안된다.
		real, double precision : 자바에서 double과 같음
		float(n) : 최소한 n-digit은 돼야되는 double, 즉 float(8)이라면 최소한 8자리 이상의 수여야 한다.
		(굉장히 정밀한 프로그램에서 많이 쓰임)

		-------------------------------

		create table department (
			dept_name	varchar(20),
			building		varchar(15),
			budget		numeric(12,2),
			primary key(dept_name));

		테이블을 만들 때의 무결성 제약조건
		not null : 반드시 값이 있어야 하고 값을 알아야만 하는 경우는 not null(ex : 학번)
		primary key
		foreign key

		create table instructor(
		ID		varchar(5),
		name		varchar(20) 	not null,
		dept_name	varchar(20),
		salary		numeric(8,2),
		primary key(ID),
		foreign key(dept_name)
			referencecs department(dept_name));			//dept_name은 외래키인데, department 테이블의 기본 키인 dept_name을 가져와서 쓰겠다.

		외래키로서 참조되는 키는 참조되는 테이블에서 기본키여야 한다.

		테이블을 없애고싶다면 drop table r 과 같이 사용, 근데 tuple이 있으면 없앨 수 없다.
		그렇다면 delete from student 와 같이 tuple을 없앨 수 있다
		alter table r add A D
		테이블 r에 새로운 칼럼 A를 타입 D로 넣어라.
		alter table r drop A
		테이블 r에서 A를 없애라

		mydb.sql 을 실행해서 테이블을 만들어야함
		mysql에 로그인하고 source mydb.sql 명령어로 실행.
		주의사항 : 경로를 지정해주어야 함. mydb.sql이 있는 폴더의 경로를 source 다음에 써준다.
		ex ) source C:/work/mydb.sql
		mysql에서는 경로 간 구분을 백슬래쉬가 아니라 슬래쉬로 한다고 한다. 학생들이 이 관련 질문이 굉장히 많다고 함.
		다음주까지 데이터베이스 설치해오깅~


	<추가내용>
	DDL : 어떤 스키마를 정의하기 위한 랭귀지.
		DDL은 Data dictionary에 저장된다.(데이터 사전)
	데이터 사전에는 메타데이터를 포함한다.
	스키마, 무결성 조건, 권한, 키 정보 등이 데이터 사전에 포함된다.

	DML : 우리가 흔히 아는 쿼리문. Select From....
		DML은 선언적이다. (비 절차적이다)
		검색을 위해서 절차를 모두 쓰지 않고 찾을 것만 바로 선언한다.(네이버/구글 검색)

	
	<추가내용>
	데이터를 선언만 하면 알아서 데이터를 찾아준다. 이 기능은 쿼리 프로세서를 통해 가능하다.
	쿼리 프로세서는 다음과 같은 과정을 통해 데이터를 찾는다.
		Parsing and translation : 작성된 쿼리에 문제가 있는지 검사하고 없다면 파싱한다.
		Optimization : 어떤 방법이 가장 좋은 지는 현재 데이터베이스의 상황에 따라 다를 수 있기 때문에 최적의 방법을 찾는다.
		Evaluation : Cost가 가장 적은 방법을 수행하고 결과를 출력한다.

	Transaction : 데이터베이스에서 동작하는 하나의 로지컬한 함수들의 집합.
		쉽게 말하면 데이터베이스의 상태를 변화시키기 위해 수행하는 작업의 단위이다.
		==> A collection of operations that performs a single logical function in a database application 

		트랜잭션은 다음과 같은 특징을 가진다.
			1. 원자성 : 트랜잭션이 데이터베이스에 모두 반영되던가, 아니면 아예 반영되지 않아야 한다는 것.
			2. 일관성 : 트랜잭션의 작업 처리 결과가 항상 일관성이 있어야 한다는 것.
			3. 독립성 : 둘 이상의 트랜잭션이 동시에 실행되고 있을 경우 어떤 트랜잭션도 다른 트랜잭션의 연산에 
				끼어들 수 없다는 것이다.
			4. 지속성 : 트랜잭션이 성공적으로 완료되었을 경우 결과는 영구적으로 반영되어야 한다는 것.
	Transaction manager : 일종의 모듈, 굉장히 많을 수 있는 transaction들이 일관성 있는 상태로 유지되도록 하는 역할을 한다.
		==> 여러 종류의 시스템 실패들(전력, 운영체제, 트랜잭션 문제들)에 대비해서 데이터베이스를 일관된 상태로 유지함. 
		