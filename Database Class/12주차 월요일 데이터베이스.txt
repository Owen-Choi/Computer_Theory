Transaction : 
	
	transaction은 프로그램 실행의 단위, unit이다.
	그 프로그램 내에서는 데이터를 읽기도 하고 업데이트도 한다.
	여기서 업데이트를 하기 때문에 동기문제 등 신경써야 할 작업이 생긴다.
	
	transaction은 하나 이상의 instruction으로 이루어져있다. 
	ex : 송금

	그리고 이 트랜잭션은 동시에 여러개가 실행될 수 있으므로 문제가 발생할 소지가 있다.
	Transaction은 4가지 특성을 만족해야 한다.

		Atomicity : 원자성 : 둘로 쪼갤 수 없다.
			둘다 실행이 되던지 둘다 안되던지. 하나만 실행되면 안됨.

		Durability : 영속성? 
			트랜잭션이 끝났다 -> 모든 연산이 끝나고 데이터가 데이터베이스에 
			저장이 됐다.
			이런 데이터에 대해서 저장이 완료된 데이터가 바뀌면 안된다.
			
		Consistency : 일관성
			일반적으로 무결성 제약조건 같은 것들이 전부 만족이 돼야된다?
			데이터가 consistent 하지 않다, 이미 잘못된 데이터가 들어가있다 하면
			그걸 찾고 수정할 수 없다.
			어떤 트랜잭션이라도 실행을 할 때는 데이터베이스가 consistent 하다 
			라고 가정을 하고 시작한다.

			트랜잭션이 실행되는 중간에는 잠시 inconsistent 할 수도 있다.
			송금에서, 돈을 보냈지만 상대가 아직 돈을 받지 못한 상태일 수 있음.

		Isolation : 독립성, 고립성
			스케쥴 : 시간 순서에 따라서 실행되는 표를 나타냄.
			5페이지의 T1과 T2 : 
				T2의 출력 함수는 잘못된 A+B값을 출력한다.

			독립성은 이 T1과 T2가 서로 연계되면 문제가 생기지만 연계되지 않으면
			문제가 없다. 트랜잭션은 이 독립성에 의해 각각의 트랜잭션이 독립적으로
			동작하게 느끼게 한다.
		이하 ACID
	
	transaction state 페이지 부연설명 : 

		active -> partially commited(부분적으로 저장이 됨, 완전히 저장된 상태 아님.)
		그리고 이 표를 보면 결과가 committed  또는 aborted이다. 
			==> Atomicity
		transaction은 끝에 반드시 commit 또는 Rollback(abort)이 있어야 한다. 반드시.		

	동시 실행은 transaction의 throughput(처리율)을 높이고 프로세서와 디스크의 활용성을 높인다.
	
	Concurrency control : 동시성 제어
		Isolation 특성을 보장하는 것.
		Isolation 특성이 보장되면 동시에 실행되면서 생기는 문제들을 막을 수 있다.

	Schedule 표 : 
		위에서 아래의 방향으로, Chronological 하게 명령이 실행됨.
		
		Serial schedule : 순차적인 일정.
			하나의 트랜잭션이 끝나면 다음 트랜잭션이 실행되고, 순차적으로
			실행되는 스케쥴 구조.

		Serial Schedule에서 실행의 결과는 항상 Consistent하다.	
		
		Schedule 3 :
			Serial Scheudule이 아니다. T1이 끝나기 전에 T2가 실행된다.
			하지만 Serial Scheudule과 결과가 같다.
			이런 스케쥴을 Serializable Schedule 이라고 한다.
			순차 스케쥴은 아니지만 순차화 할 수 있다는 것.

		Serializable Schedule의 끝에 데이터베이스는 마찬가지로 Consistent하다.
		
		Schedule 4 : 
			어떤 스케쥴도 아니다.
			데이터베이스의 Consistency를 보장할 수 없다.
			근데 왜 Serializable이 아니지? 


	Serializability : 
		두가지로 나뉜다. Conflict 와 view. 이 강의에서는 Conflict만 보겠다.
		일단 트랜잭션들이 Conflict가 있는지 확인하기 위해 단순화시킨다. read와 write로 단순화.
		instruction이 충돌이 있다 = 두개의 트랜잭션이 실행되는데 Ti에서 Instruction i,
		Tj 에서 j를 실행한다고 가정해보자.

		둘 다 동시에 같은 데이터를 Read하면 충돌 x
		둘 다 동시에 같은 데이터를 하나는 Read, 하나는 Write 충돌 o
		둘 다 동시에 같은 데이터를 write하면 충돌 o 
		
		==> 즉 두개의 트랜잭션이 같은 데이터에 대해 어느 한쪽에서라도 write를 했다면
		충돌이 일어난다.

		Conflict equivalent : 
			인스트럭션들 간에 충돌이 없다.
			즉 순서가 바뀌어도 결과가 같다. 순서를 바꿨을 때, 바꿔서 얻어진
			결과를 Conflict equivalent라고 한다.
			페이지 19 : 
				스케쥴 3을 스케쥴 6으로 바꿈. 이것이 Conflict equivalent
				그리고 바꿨더니 Serial schedule이 됐다.
				이 것이 Conflict Serializability

		스케쥴 7은 충돌이 일어난다.
			그리고 여기서 T4가 먼저 실행이 돼야한다.
			T3도 내부적으로 충돌이 있기 때문.

		precedence graph에서 cycle이 없으면 충돌이 없는 것.
		22페이지의 a 그래프는 cycle이 아니다. 
		
		Partial order : 일부에 대해서만 순서가 있다?
			a는 partial order이다. tm에는 순서가 없기 때문.
		
		그리고 b는 total order이다.
		여기서 partial order를 total order로 바꾸는 것이 topological order이다.

		Recoverable schedule : 

			Commit된 것은 바꿀 수 없다.
			만약 23페이지에서 T6를 abort하면 T6 전체가 취소된다. 
			하지만 T5에서 이미 COMMIT을 했기 때문에 취소를 할 수가 없다.
			이것이 회복불가 스케쥴이고 이런 스케쥴은 발생해서는 안된다.

		Cascading rollbacks : 

			T8에서 abort하면 T9, T10도 취소되는 것.
			즉 연쇄취소를 Cascading rollback이라고 한다.
			번거롭긴 하지만 문제는 발생하지 않는다.

		Cascadeless scheduels : 
			연쇄취소가 없는 스케쥴을 일컫는다.
			

		Transaction isolation : 
			Concurrency control :
				회복불가능한 상황이 발생하지 않도록 해줌.
				
		스케쥴이라는 것은 실행이 된 다음에 얻어지는 것.
		스케쥴이 실행된 다음에 Serializability를 논하는 것은 늦음.
		이것을 동시성 제어가 보장해야 한다.

			Concurrency control에 대해 자세히는 다루지 않겠음.

		
	weak levels of consistency : 
		블로그의 좋아요와 같은 조금씩 틀려도 되는 정보, 대략적인 값만 필요한 정보
		등에 한해서는 consistency를 조금 느슨하게 풀어놓는다.
		
		Concurrency가 진행중에 Serializable 함과 Consistency를 유지하는 것은 
		데이터베이스 입장에서 아주 오버헤드가 크고 어려운 기능이다.
		따라서 Consistency를 조금 약화시킨다.
		
		Phantom read :
			다른 트랜잭션의 결과로 만들어진 데이터로 인해 
			없던 값이 나타나는 것. 좋지 않은 현상이다.
				
		Non-repeatable read
			다른 트랜잭션의 결과로 인해 원래 있던 값이 바뀌는 것.

		Repeatable read : 
			phantom read까지는 허용하는 Consistency level.
			가장 보편적이다.	
	
	트랜잭션의 시작과 끝을 명시를 해줘야 한다.

		끝은 앞에서도 말헀지만 Commit 또는 Rollback이다.