Aggregate function : 집계함수, 통계함수
	avg, min, max, sum, count
	입력으로 받는 값들의 개수가 많은 것이 특징
		select avg(salary)
		from instrcutor
		where dept_name = 'Comp.Sci';

			select count(distinct ID)
				==> 선택된 테이블과 조건을 만족하는 ID의 개수를 중복을 제거하여 출력
		Count		
			어떤 테이블이 A, B라는 attribute가 있다면 count 개수는 어떤 attribute를 대상으로 하던 같다.
				select count(*)
				from course;

		Group By
			Group By는 각 그룹별로 실행이 되는 함수이다.
			이건 잘 이해가 안가네. 실습으로 해봐야겠다.
			유의할 점은 각 그룹별로 한줄을 출력하는 건데, 만약 각 그룹별로 한줄이 넘어가게 되면
			실행이 안된다. ppt 42를 봤을 때, 만약 ID가 2개 3개가 되면 한줄이 넘어가고 오류가 된다.
			표준에서는 에러라고 뜨지만 mysql / 오라클은 실행이 된다.
		----내용 추가----
			만약 구매 횟수는 따로 제공하지 않고 구매액수만 제공하는 릴레이션에서 구매 횟수가 2번 이상인 고객을 뽑을려고 한다.
			이럴 경우 group by를 활용한 쿼리문은 다음과 같다.

			SELECT CUST_NM, COUNT(*) AS CNT			
				FROM PROD_SALES
				GROUP BY 1
				HAVING COUNT(*) > 1;				//고객 이름과 CNT를 그룹으로 묶고, 그 그룹안에서 조건을 걸었기 때문에 Having 사용
										// 이 구문에서 GROUP BY CUST_NM이 없으면 CNT는 10이 나오게 된다. 하지만 이름을 기준으로 묶어주었기 때문에 
										// 다음과 같은 결과가 나오게 된다.
+---------+-----+
| CUST_NM | CNT |
+---------+-----+
| KANG    |   1 |
| KIM     |   3 |
| KWON    |   1 |
| LEE     |   2 |
| PARK    |   2 |
| YOO     |   1 |
+---------+-----+
									<== HAVING 절을 뺀 쿼리문의 결과. 그룹으로 묶어주었기 때문에 이름별로 나누고, *을 따로 count한다.
										==> 만약 group by 로 묶지 않는다면 CNT는 단순히 10이라고 출력이 된다. 테이블 전체를 기준으로 *을 세기 때문.
					
+---------+--------+-----------+
| CUST_NM | PRD_ID | SALES_AMT |
+---------+--------+-----------+
| LEE     |    546 |      3000 |
| KIM     |    324 |      4780 |
| KANG    |    564 |     87900 |
| KWON    |    556 |     45478 |
| KIM     |    254 |      3000 |
| YOO     |    567 |     78900 |
| PARK    |    877 |     89787 |
| LEE     |    890 |     10000 |
| KIM     |    787 |      2341 |
| PARK    |    566 |     50000 |
+---------+--------+-----------+		<== PROD_SALES 테이블.

		Having clause
			select dept_name, avg(salary)
			from instructor
			group by dept_name
			having avg(salary) > 42000;
			 ==> 그룹 중에서 having절의 조건을 만족하는 그룹만 출력한다.
				만약 group by가 없으면 에러가 날까? ==> 실습에서 해보란다.		
		
		Aggregate function을 실행할 때 null이 있다면 그냥 없는 것으로 취급한다. null로 인해 연산이 꼬이기 때문인가?
		count(*)만 유일하게 예외로 null value를 무시하지 않는다고 한다. 즉 null value도 count한다.
		만약 salary가 모두 null일때, count(salary) 는 0을 return하고 count(*)는 null의 개수를 return한다.

		

	Nested Subqueries
		쿼리 안에 쿼리가 있는 경우. Select 문장 안에 Select문장이 있는 경우
			ppt 45참고 : 안쪽에 있는 select 문을 먼저 실행을 시키고 밖에 있는 select문 실행하기
		<추가내용>
		서브쿼리를 왜 써야할까?
		select * from userTable where height > (select height from userTable where addr='경남')
		만약 주소지가 경남인 사람보다 키가 큰 사람의 정보를 찾는 다음과 같은 쿼리가 있다고 생각해보자.
		이 경우에 경남에 사는 사람이 여러명이라면 오류가 난다. 비교대상이 명확하지 않기 때문.
		이럴 경우에 서브쿼리를 써야한다. 서브쿼리로 테이블을 받고, 그 테이블안에서 또 비교를 수행하는 느낌 			

		Some 
		<추가내용>
		ANY와 같은 맥락인 듯 하다. IN과도 기능이 거의 같은데, 차이는 IN은 연산자가 "="밖에 없지만 Some은 여러가지 연산을 수행할 수 있다.
		즉 ANY 혹은 SOME이 =의 연산만 수행한다면 IN으로 대체 가능하다.
		Some(=Any)은 열거된 조건중에 하나라도 성립을 하면 true를 반환한다. 
			마찬가지로 중첩된 쿼리문의 구조를 띄는데, 의미는 다음과 같다. ==> 이것도 선택이다. 그렇게 만들어도 되고 아니어도 된다.
			where salary > some(select salary from instructor where dept_name = 'Biology');
				오른쪽의 select문의 결과 중 하나라도 조건을 만족하는 것이 있다면 결과를 출력한다.
		
		all
		<추가내용>
		열거된 조건을 모두 만족해야 한다.
			some은 하나라도 만족을 하면 출력이 됐지만 all은 모든 tuple이 만족을 해야 출력한다.

		exists
			여태까지는 안쪽의 select문을 먼저 실행했지만 exists 문은 살짝 맥락이 다른 것 같다.
			ppt 49참고 : 밖에서 attribute 정보를 받아오던가 해서 exitsts 조건을 실행하고 조건을 
			만족하는 값이 '존재'한다면 출력한다. : 15번 실행됨, 15^2 아님
		<추가내용>
		exists의 연산 순서는 메인쿼리 -> 서브쿼리 이다. 즉 서브쿼리에서 메인쿼리의 정보를 사용할 수 있다.
		하지만 IN의 연산 순서는 서브쿼리 -> 메인쿼리이다. 즉 서브쿼리에서 메인쿼리의 정보를 사용할 수 없다.

		not exists
			결과가 없으면 출력을 하고 있으면 출력을 하지 않는다. 즉 exists와 완전히 반대기능

		unique
			중복이 없을 경우 true(출력)

		from절 안에 sub queries가 들어가는 경우
			이것도 실습...

		Scalar subquery
			어떤 테이블의 튜플 하나에 대해서 여러줄을 출력할 수는 없다. 1줄 또는 0줄이다.
			53 : 이해하고 넘어가자.

Modification of the Databases
		Deletion
			delete from instructor;
				==> instructor 안에 있는 모든 tuple을 없애라.
			where절을 추가하면 조건을 만족하는 값만 제거할 수 있다.
			54 : select문 연산으로 생성된 테이블의 결과에 포함이 되는 값만 없애기
			

		Insertion
			insert into course
				values('CS-437', 'Database Systems', 'Comp. Sci.', 4);
			만약 테이블 옆에 attribute를 지정해준다면 그 attribute에만 맞게 넣어주면 된다.

			select문의 검색 결과를 통째로 insert하는 것도 가능하다.

		Update
			update instructor
			set salary = salary * 1.03
			where salary > 100000;
				말 그대로 값을 업데이트 한다.

		RENAME
			ALTER를 통해서 바꿀 수도 있지만 mysql은 RENAME명령어를 제공한다.
			RENAME old_name TO  new_name;

			+ alter : 
				ALTER TABLE old_name RENAME new_name;