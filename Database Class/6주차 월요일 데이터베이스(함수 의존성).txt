join과 같은 combine schema, 즉 테이블을 combine하면 중복과 같은 문제가 생긴다.
즉 join으로 테이블을 합치는 디자인 방식은 여러 문제를 수반한다.
여기서 우리는 테이블을 더 크게 만들지 말고 작게 만들면 어떨까 라는 의문이 생긴다.(smaller schema)
decomposition : functional dependency(함수성 종속)
	테이블을 소분할 때 functional dependency가 도움이 된다.
	ex) schema(dept_name, building, budget), candidate key (dept_name)이라고 하면
		dept_name -> building, budget 으로 나타낼 수 있다.
		교수님 설명에 따르면 dept_name이 candidate key역할을 하고 있었는데 테이블을 합치면서(??)
		더 이상 candidate key의 역할을 하지 못하게 됐고, 그로 인해 building과 budget이 반복적으로 나타나게 되는
		결과가 나온 것이라고 한다. 무슨 말인지 이해는 감.
		위와 같은 관계를 함수성 종속이라고 한다.

함수성 종속에 의해 테이블을 작게 만드는 것이 항상 좋을까?
	아닐 수도 있다. Lossy decomposition(손실분해)	=> ppt 그림 참고, 분해하고 natural join을 다시 하면 결과가 이상하게 나온다.
	
	r(R) r은 relation이름, R은 속성들의 집합 : employee(ID, name ...) 
	
	lossless-join decomposition(무손실분해)
		만약 R = (A,B,C)을 R1(A,B), R2(B,C)로 소분했을 떄, 다시 자연조인했을 때 처음 릴레이션 R과 완벽히 똑같은 결과가 나와야
		무손실분해이다. 

Normalization(정규화)의 목표
	우리가 어떤 relation R을 가지고 있을 때 이 relation이 좋은 form이냐 하고 결정을 할 필요가 있다.
	만약에 R이 충분히 좋은 form을 가지고 있지 않다면 R을 분해를 해야한다.
	(중간에 숨어있는 함수적 종속관계가 있으면 데이터 중복이 발생할 수도 있고 충분히 좋은 form이 아니다.)
	또한 분해의 과정에서 함수적 종속관계가 깨지면 안된다. 
	
	정규화는 일반 정규화와 고급 정규화로 나뉜다.
		일반 정규화 : 
			(1NF, 2NF, 3NF, EKNF, BCNF(3.5NF)) 를 묶어 일반 정규화라고 한다.
		고급 정규화 : 
			(4NF, 5NF, 6NF)를 묶어 고급 정규화라고 한다. 

		1NF(FIRST NORMAL FORM)
			Domain이 atomic이어야 한다. 즉 complex attribute가 아니어야 한다. 
			바꿔말하면 만약 어떤 릴레이션 R이 1NF이면 R의 모든 attribute는 atomic하다고 생각하면 된다.

		교수님 설명에 따르면 만약 학생 전공과 번호를 알 수 있는 roll numbers라는 열이 있고, 포맷이 "CS100"과 같다면 
		컴퓨터 공학임을 알기 위해 CS, 번호를 알기위해 100 이렇게 두개로 분류하는 작업이 필요하다고 한다.
		이런 작업을 필요없게 만드는게 1NF의 기본적인 철학이라고 한다.
		

함수적 종속을 사용한 분해 (Decompostion using functional depencies)
	
	목표 : 특정한 릴레이션이 "좋은"형태를 띄게 하기 위해 (1NF에서 "좋은" 형태는 atomicity를 띄는 것. 이런 식으로 단계마다 목표가 다르다.)
	
	그럼 함수적 종속이 뭘까? 
		함수를 생각해보자. f:X -> Y : x에서 y로 가는 함수다. 그리고 함수는 X값에 따라 Y값이 달라진다. 이런 관계에 있는 것을 
		함수 관계에 있다고 말한다. 
		책의 예제를 생각해보면, dept_name에 따라서 building과 budget이 달라졌다. 이런 것을 함수관계에 있다고 한다.

		<추가 내용>
		어떤 테이블 R에 존재하는 필드의 부분집합을 각각 X와 Y라고 할 때, X의 한 값이 Y에 속한 오직 하나의 값에만 사상될 경우
		Y는 X의 종속함수라고 하며 X->Y라고 표기한다.
		예를 들어 테이블에 [생일]과 [나이]가 존재할 때, [나이]필드는 [생일]필드에 함수 종속이다. 생일을 알고있다면, 나이에 대한 
		필드를 참조하지 않거나 아예 필드를 유지하지 않아도 나이를 알 수 있기 때문.
		 
		만약 K가 r(R)의 super key라면 K -> R을 만족한다. 생각해보면 당연.

	함수적 종속은 어떤 방법으로 사용될 수 있을까
		릴레이션의 인스턴스가 주어진 함수종속의 집합 F를 만족시키는 지 검사하기 위해서 사용될 수 있음.
			예를 들어 A -> B, B -> C 라는 함수적 종속이 있다면 얘네를 다 모아놓은 것이 F.
		적법한 릴레이션의 집합에 대해 제약조건을 명시하기 위해서 사용하는 경우도 있음.
			F holds on R (F가 R을 보증한다)이라는 건 R의 모든 적법한 relation은 F의 함수적 종속을 만족한다는 뜻이다.
		
	Trivial : '하찮은' : 당연하다는 뜻이다. ID,name -> ID, name -> name이 이에 해당한다.
		일반적으로 B가 A에 속한다면 A -> B는 trivial이다.

	Closure : (0,1) = 0,1을 포함하지 않는 0과 1 사이의 값들
		[0,1] = 0,1을 포함하는 0 과 1 사이의 값들 = closure

		r(A,B,C)라는 릴레이션이 있고 A->B, B->C라는 함수적 종속을 가지고 있다고 생각하면 여기서 A->C 라는 함수적 종속을
		유추할 수 있다. 즉 이럴 경우 F {A->B, B->C}에서 F+ {A->B, B->C, A->C}가 된다. 그리고 이것을 F의 closure라고 하고,
		당연한 말이지만 F의 superset이 된다.

		+----------+-------------+----------+
		| building | room_number | capacity |
		+----------+-------------+----------+
		| Packard  |         101 |      500 |
		| Painter  |         514 |       10 |
		| Taylor   |        3128 |       70 |
		| Watson   |         100 |       30 |
		| Watson   |         120 |       50 |
		+----------+-------------+----------+
		여기서 functional dependency를 찾아보자.
		room_number -> capacity :  f1, 
		Building, room_number -> capacity : f2
		
		함수성 종속을 보여주는 첫 예제 : 
			위 릴레이션에서는 f1도 함수성 종속이 맞지만 시간이 지나고 여러 데이터가 삽입된다면 f1은 함수성 종속을 유지하기
			어려울 것이다. 따라서 f2로 building까지 묶어주어야 함수성 종속이 안정적이게 된다.

Boyce-Codd normal form

		어떤 릴레이션 R이 Functional dependency F에 대해서 Boyce-Codd normal form에 있다는 말은 F의 closure(F+) 안에 있는
		모든 함수성 의존 중에서, 다음의 조건 중 하나라도 만족할 때 해당된다. 
		1. A -> B가 trivial(B가 A에 속함)
		2. A가 R에 대해서 super key

		ex) instr_dept (ID, name, salary, dept_name, bulding, budget) 라는 릴레이션에서
			dept_name -> building, budget 이라는 FD는 1번, 2번 모두 만족하지 않는다.
			1. dept_name은 building과 budget을 포함하지 않는다.
			2. dept_name은 instr_dept의 super key가 아니다.
		따라서 이 릴레이션은 BCNF가 아니다.

		BCNF는 어떤 Functional Dependency가 있으면 이 FD의 A(앞에 있는 요소)가 super key가 되게 보장해주자 라는 의미를 지니고 있다.
		그게 BCNF를 만든 이유라고 한다.

		릴레이션을 BCNF로 만들려면 어떻게 쪼개야 할까?
		릴레이션 R의 subset A,B가 있다고 치면 우리는 R을 다음과 같이 쪼갤 수 있다.
		
		1. A U B (합집합)
		2. (R - (B - A))
		
		앞의 예제에 그대로 적용을 시켜보면 A = dept_name , B = building, budget 으로 볼 수 있고, 1번과 2번을 적용시키면 다음과 같다.
		1. (dept_name, building, budget)
		2.(ID, name, salary, dept_name)
		
		이렇게 나누면 BCNF를 만족하게 된다.	
		★1의 경우에서는 dept_name이 super key가 된다. 애초에 FD가 성립했고 dept_name이 A의 자리에 있었으니 A와 B로만 이루어진
		테이블에서는 반드시 A가 super key가 되게 된다.
		2의 경우도 위와 같이 특정 열이 모든 경우에서 super key가 된다고 한다. == BCNF 만족
		
		BCNF의 한계 : 항상 원래 가지고 있던 릴레이션의 FD가 보존되게 쪼갠다는 보장이 없다. 그리고 이것을 검사하는 비용도
		릴레이션의 규모가 커진다면 증가하게 된다. FD 보존이 중요한 이유는 FD가 어떠한 관계성을 나타내기 때문이다.
		그래서 BCNF보다 조금 weak 하지만 FD의 보존이 향상된 third normal form, 3NF가 등장한다.

Third Normal Form(3NF)

	하나의 릴레이션 스키마 R이 3NF이다. when? F+에 있는 모든 A -> B 함수적 종속이 적어도 다음 3가지 조건 중 하나를 만족할 때.
	조건이 하나 늘어서 더 복잡해 보이지만 하나만 만족해도 3NF이기 때문에 오히려 BCNF보다 더 까다롭지 않다.
	당연히 BCNF이면 3NF이다.
		1,2번 조건은 BCNF와 동일하다.
		3. (어려움 주의) A -> B라는 FD에 대해서 (B-A)의 각각의 attribute A가 전체 릴레이션 R의 후보키에 포함이 돼야된다.
			3번 조건이 FD를 보존하기 위해 추가된 조건이다.

	다른 책들은 이행 종속, 즉 A -> B, B -> R 이면 A -> R 이런 관계가 없도록 만드는 것이 3NF다 라고 정의한다고 한다.
	즉 3NF에 맞춰 Decompose된 릴레이션들은 이행 종속이 없다는 뜻인데, 그것이 바로 3번 조건이 말하고 싶은 내용이다.
	

Higher Normal Forms (그 중에서 4NF) : 
	BCNF의 형태를 지킨 릴레이션이 항상 효율적으로 정규화되지는 않는다. BCNF의 form을 가진 릴레이션 중 다음과 같은 경우가 있다고 하자.
	만약 99999라는 ID를 가진 William과 David가 있다면 새로운 휴대폰 번호를 99999에 할당할 때
	David와 William 두명에게 다 할당을 해줘야 한다. 즉 쓸데없이 삽입의 횟수가 늘어나게 된 것이다. 이런 것을 Insertion Anomalies라고 한다.
	따라서 이런 비효율성을 보충해주기 위해 등장한 것이 4NF(뿐만 아니라 Higher NF들이 나온 이유)이다. 이건 나중에 살펴본다고 한다.
	

	여태까지 Form들을 볼 때 다들 F를 고려하지 않고 F+를 고려했다. 당연히 super set이니까 그렇겠지? 
	그러면 closure를 어떻게 찾을까? 

		암스트롱의 공리(Amstrong's Axioms) : 
			1. reflexivity : 만약 B가 A에 속하면 A -> B이다.
			2. augmentation : 만약 A -> B이면 AR -> BR이다.
			3. transitivity : 만약 A -> B이고 B -> C이면 A -> C이다.
		(추가내용 파일에 있던 것들. 이것들을 이용해서 closure를 찾을 수 있다.)
		이 공리만 사용하면 더 이상 숨어있는 FD를 찾을 필요가 없어서 굉장히 powerful하다고 한다.

		ex) R(A,B,C,G,H,I)
		     F(A->B, A->C, CG->H, CG->I, B->H)

			1. A -> H (transivity)
			2. AG -> I
				이건 자세히 살펴보자. 먼저 F에 있는 A -> C에 G를 augmentation하면 AG->CG가 된다.
				그리고 CG -> I FD와 transitivity에 의해 AG->I가 도출될 수 있다.
			3. CG -> HI
				이것도 자세히 살펴보자. 먼저 CG -> I 에 CG를 augmentation하면 CGCG->CGI가 된다.
				(CGCG는 CG이다.) 이어서 CG -> H에 I를 augmentation하면 CGI -> HI가 된다.
				여기서 transitivity에 의해 (CG -> CGI -> HI) CG -> HI가 도출된다. 
	
	Closure를 찾는 쓰도코드가 있다. 교수님 말씀에 따르면 위처럼 일일이 다 찾는 건 바보같은 짓이라고 한다.
		쓰도코드를 요약하면 다음과 같다.
			첫번째 step에서는 augmentation을 막(?) 해본다. 그리고 그런 것들을 다  F+ set에 넣는다.
			두번째 step에서는 같은 attribute?를 기준으로 붙여본다(transitivity)
			더 이상 추가할 FD가 없을 때까지 이것을 반복한다.

		이렇게 F+를 찾아서 위의 form들에 해당하는지를 체크할 수 있는 것이다.
	
	암스트롱 공리 말고도 다른 rule들이 있다.	 

		1. Union rule :
			A -> B이고 A -> R이면 A -> BR이 유추된다.
		2. Decomposition rule :
			A -> BR 이면 A -> B이고 A -> R이다. (Union의 역순)
		3. Pseudo-transitivity rule : 
			A -> B 이고 BR -> D 이면 AR -> D이다.
				이건 closure 찾을 때 비슷한 예제를 봤다. A -> B에 R를 augmentating하면 AR -> BR이 되고,
				여기서 transitivity에 의해 AR -> D 가 유추된다.

		
Closure of Attribute sets
		우리가 앞에서 배운 Closure와 다른 측면의 Closure라고 한다.
		FD의 closure는 FD의 set들의 집합인 F의 cloure고, Attribute set의 closure는 Attribute에 대한 closure라고 한다.
		즉 만약 A -> B라는 FD가 있으면 여기서 F+를 찾는게 아니라 A+를 찾을 수 있다고 한다.
		
		R = (A,B,C,G,H,I)
		F = (A->B, A->C, CG->H, CG->I, B->H) 가 있고 a(알파)가 CG라고 하자.
		a+ = (AG)+
		a+는 AG에 영향을 받는 Attribute의 set이다.
			어떻게 찾을까?
			1. AG 자기 자신.
			2. ABCG(B는 A에 영향을 받고, C도 A에 의해 영향을 받는다.)
			3. ABCGH  (CG->H, CG->ABCG)
			4. ABCGHI (CG->I, CG->ABCGH)
		즉 ABCGHI가 a의 attribute closure이다.

		이것을 가지고 AG, 즉 a가 candidate key인지 아닌지 판단할 수 있다.
		AG -> R 라는 것은 (AG)+가 R을 포함한다고 볼 수 있다. 즉 AG로 인해 영향을 받는 모든 Attribute의 집합이 R을 포함한다면
		AG는 R에서 candidate key이다.
		그리고 AG의 subset이 superkey인지 아닌지도 같은 맥락으로 확인해볼 수 있다.
		A+가 R을 포함한다면,
		G+가 R을 포함한다면
		각각 A,G는 R의 superkey이다.

	Attribute closure의 사용
		1. superkey에 대한 test로 사용할 수 있음.
			위와 같은 맥락이다.
		2. functional dependency에 대한 test로 사용할 수 있음.
			a->b로 가는 FD가 성립하는지 test할 수 있다. (b가 a+에 속한다면 true)
		3. F의 closure를 찾는데에도 사용될 수 있다.
			R에 포함되는 모든 각각의 r에 대해서 r의 closure r+를 찾고, r+에 포함된 어떤 subset S에 대해서 r -> S라는 FD를 뽑아내면
			이것이 F의 closure가 된다?? 왜?? ==> 생각해보면 그렇긴 하겠다. 
				==> 강조를 하셨다.