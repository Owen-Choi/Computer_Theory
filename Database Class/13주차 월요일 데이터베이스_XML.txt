XML : 
	
	확장 가능한 마크업 언어의 줄임말
	XML은 태그의 형식으로 사용한다.

		open tag <-> close tag
		이 태그 안에 있는 것을 element라고 한다. 
			<to>Tove</to> 이면 Tove는 to의 element이다.
		이런 특성 때문에 XML 문서는 tree 구조를 갖는다.
		그리고 가장 위에 있는 element를 root element라고 부른다.
		또한 category도 존재하는데, 이는 attribute라고 부른다.

	HTML에서는 이미 정해진 태그를 사용했지만 XML은 내가 원하는 데이터에 따라 태그를 직접 만들어 쓴다.
	W3 = WORLD WIDE WEB, XML은 이 W3의 recommendation, 즉 사실상 국제 표준이라고 보면 된다.

	XML과 HTML은 용도가 다르다. 
	XML은 data sharing, data store 등이 주 목적인데 반해 HTML은 어떻게 데이터를 사람들에게 이쁘게 보일까가 목적이다.

	XML 태그는 대소문자를 가린다. (case - sensitive)

	Entity : C에서의 #define과 비슷한 기능.
	
	똑같은 데이터를 element와 attribute로 나타내는 것은 무슨 차이가 있을까
	p.11  : date를 표현하는 차이를 보여주는 슬라이드.
		ㄴ 정답은 없다. 문서를 만드는 목적, 문서를 사용하는 어플리케이션에 따라서 정하면 된다.
		
		그런데 attribute를 피해야 할 경우가 있다.
			attribute는 값을 여러 개 가질 수 없고, 트리형태를 가질 수 없다. 
			element는 하위에 여러가지 element를 가질 수 있는데 반해 attribute는 이가 불가능함.
			그리고 미래에 데이터의 변동이 예상된다면 attribute를 사용하는 것은 좋은 선택이 아니다.
		따라서 attribute는 데이터의 데이터, 즉 메타데이터를 다룰때 주로 사용된다.

	xml 신택스가 많이 있고, 그 신택스를 잘 따라서 만든 문서는 well-formed document라고 한다.
		xml 신택스는 다음과 같다.
			XML document must have a root element
			XML elements must have a closing tag
			XML tags are case-sensitive
			XML elements must be properly nested
			XML attribute values must be quoted
	Document Type Definition(DTD)
		관계형 데이터베이스에서 테이블 스키마와 비슷한 기능.
		어떤 XML 문서의 형식. 
			<!DOCTYPE note SYSTEM "note.dtd">
			==> 이 문서 안에서 root는 note고 이것이 정의된 DTD는 note.dtd이다 라는 것을 명시하는 줄.

		만약 dtd의 format을 따라서 문서가 잘 만들어졌다면(형식에 잘 맞으면) 그 문서를 valid하다고 한다.

		DTD가 XML 문서 안에 존재하여도 문제없다.

/////////////////////////////////////////////////////////////////////////////
	<DTD 예시>
	<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
		<!DOCTYPE food [
			<!ELEMENT food (name,type,cost)>
			<!ELEMENT name (#PCDATA)>
			<!ELEMENT type (#PCDATA)>
			<!ELEMENT> cost (#PCDATA)>
		]>
	여기까지가 DTD이다. 아래 코드는 xml이고, 이 두개가 한 파일에 있다면 이는 내부 서브셋이다.
	외부에서 DTD가 선언될 경우 다음과 같이 경로를 명시해야 한다.
	<!DOCTYPE food SYSTEM "food.dtd">
	
	<food>
		<name>상추</name>
		<type>야채</type>
		<cost>2000</cost>
	</food>

	!DOCTYPE food는 이 문서의 루트(root) 요소가 food라는 것을 명시한다.
	!ELEMENT food는 food 요소가 name, type, cost 세 요소를 반드시 포함하야 함을 명시한다.
	!ELEMENT name은 name 요소가 #PCDATA 타입의 요소라는 것을 명시한다.


	최소 하나의 element를 가져야 한다면 <!ELEMENT element_name (child_name+)>
	0또는 그 이상의 occurence를 나타내야 한다면 <!ELEMENT element_name (child_name*)>
		ㄴ 사용처를 잘 모르겠네. not null과 비슷한 기능인가?
	0또는 한개의 occurence만을 나타내야 한다면 <!ELEMENT element_name (child_name?)>

//////////////////////////////////////////////////////////////////////////////
	PCDATA
		내용을 직접 분석해서 본다.(Parsed Character Data)
		만약 name이라는 element가 갖는 문자열로 하위 element를 넣는다면, PCDATA가 이를 해석한다.
		즉 PCDATA는 element안에 태그나 기타 다른 요소들을 모두 해석하고 인식한다.
		만약 PCDATA 타입의 데이터에 <나 >가 들어가야 한다면 &lt, &gt를 사용하여야 한다.
	CDATA	
		내용을 분석하지 않는다.(Unparsed Character Data)
		만약 자바스크립트를 XML에 넣고싶다면 CDATA를 명시해주면 된다.

	Entity : 
		entity는 DTD에 미리 정의되어있는 포맷으로 들어간다.
		여기서 dtd가 만약 외부에 있다면 링크로 접근할 수 있다.