Canonical cover
	
	함수 종속관계를 확인해야 하는경우가 있다.
	정말 쉽게 얘기하면 함수 종속 관계를 축약하여 종속관계 확인의 비용을 줄이기 위한 것이다.
	쳐낼 수 있는 요소들을 쳐낸다는 개념.

	ex) when A->B , B->C, A->C holds, then A->C is redundant : transitivity에 의해 추론할 수 있기 때문.
	ex) RHS(A->B, B->C, A->CD) 이면
		A->B, B->C, A->D 로 간소화될 수 있다. (A->C는 유추될 수 있으니 생략. 그럼 A->D는?)
	A->CD에서 A->D가 나오는 이유는 decomposition rule에 의해서기도 하고, 교수님은 그냥 저런 상황에서 C를 드랍해도 성립한다고 하셨다.
	ex) LHS(A->B, B->C, AC->D) 이면
		마찬가지로 A->B, B->C, A->D로 간소화될 수 있는데, 앞의 FD에서 A->C가 유추되고, 여기서 C는 A에 지배됨을 알 수 있다.
		따라서 AC->D라는 FD에서 C는 A에 지배되기 때문에 쳐내도 무방하다고 하고, 그렇기에 A->D가 유추될 수 있다.
	
	★우리가 전 시간에 F로부터 유도될 수 있는 모든 FD들을 추가한 것을 F의 closure로서 F+라고 표현했다면,
	F의 canonical cover는 F로부터 쳐낼 것들은 다 쳐내고 최대한 간소화시킨 것을 말하고, Fc로 표현한다.

	
	Extraneous attributes : 간소화되지 않은 attribute들?

	A는 이럴 때 a에서 extraneous다 : a(알파) -> b(베타)라는 함수적 종속관계가 있다고 생각해보자. 
	일단 A는 a에 포함되어야 한다.
	(a-A) -> b (알파에서 A를 차집합)라는 함수적 종속관계와 F-(a->b) (F에서 a->b라는 FD를 빼버림) 라는 함수적 종속관계로 나눴을 때
	A를 빼도 기존에 있던 함수적 종속관계로 충분히 유추해낼 수 있을 때 그것을 A가 a에서 Extraneous 하다고 한다.
	(※ 즉! 빼도 된다!)

	A는 이럴 때 b에서 Extraneous다 : A가 b(베타)에 포함이 돼있고 아까랑 비슷한 맥락으로 F-(a->b)와 a->(b-A)로 나누었을 때
	마찬가지로 기존의 함수적 종속관계로 유추해낼 수 있다면 그것을 A가 b에서 Extraneous하다고 할 수 있다. 
	
		즉 주저리주저리 말이 길었는데, 요점은 알파 혹은 베타에 포함된 subset 중에 그것을 빼버려도 나중에 다시 유추할 수 있느냐,
		함수적 종속관계와 그것이 가리키는 연관성에 영향을 주지 않느냐 라고 헸을 때 아무런 영향 없이 뺄 수 있는 것이라면
		Canonical cover의 목표에 따라 제거하기 위해 이렇게 장황하게 설명하신 것 같다.

		ex) F = (A->C, AB->C)
			여기서 B가 AB->C의 Extraneous이다. 위에서 a(알파)에 해당되는 예제인데, AB를 a, C를 b라고 보면
			F->(a->b)는 여기서 A->C가 된다. (위의 F에서 AB->C를 빼면 남음)
			그리고 (a-A)->b의 결과는 AB에서 B를 빼버리게 되니까 A->C가 된다.
			그리고 이 두개를 합집합(Union) 하면 A->C가 된다.
			★여기서 F에서 logical하게 A->C를 확인할 수 있으면 B는 AB->C의 Extraneous임을 알 수 있다.
			여기서는 F가 A->C를 포함하고 있기 때문에 사실임을 알 수 있다.  
				(저렇게 직접 담는 것이 아니라 유추되는 경우에도 Extraneous하다고 할 수 있나?)
					==> 아래 예제를 통해 그렇다는 걸 확인할 수 있다. 
		ex) F = (A->C, AB->CD)
			여기서 C는 AB->CD에서 Extraneous이다.
			a->(b-A)에 의해 AB->D가 나오게 되고, F-(a->b)에 의해 A->C가 나오게 된다.
			(여기서 분명히 유니온을 해야되는데....왜 그냥 나눈 것만 생각하시지...?)
				==> 합집합이 두개를 같이 고려하라는 뜻인 것 같다.
			여튼 A->C에 의해서 C는 A에게 지배되고, 그렇기 때문에 AB->CD에서 C를 drop해서 AB->D를 유추할 수 있다.
			따라서 C는 AB->CD, 거기서도 b에 Extraneous하다 라고 할 수 있다.

Testing if an attribute is extraneous
		
		FD의 집합 F에 a->b가 속하고, 그 중 a에 속하는 A는 다음의 경우에서 a에 대해 Extraneous하다.
			(a - A)+ : 알파에서 A를 뺀 attribute의 closure를 먼저 계산한다. 
			위의 결과로 나온 attribute의 집합이 b(베타)를 설명할 수 있다면 A는 a에 대해 Extraneous하다.
			즉 A는 없어도 된다.

		b에 속하는 A는 다음의 경우에서 b에 대해 Extraneous하다.
			F'(F 프라임) = {F - (a->b)} U {a - (b - A)} (이 식으로 부터 얻을 수 있는 새로운 FD의 집합)
			F'에 속하는 FD에 한해서만 a+를 계산한다. (즉 a+의 계산 범위를 정해주는것)
			이 a+가 A를 포함한다면 A는 b에 대해 Extraneous하다.
			F'은 외워야 할 것 같다.

	★F라는 set이 있을 때 어떤 relation이 크다면 그 relation의 함수적 종속의 집합 F도 굉장히 커지고 복잡해지게 된다.
	그럴때 이 F를 직접 다루기보단 F의 성질을 변화하지 않고 가장 쉽게 다룰 수 있는 small set을 만드는 과정이 canonical cover라고 이해하자.
	
	F에 대한 Canonical cover Fc는 다음과 같은 성질을 만족한다.
		1. F로 Fc를 충분히 imply 할 수 있다.
		2. 그리고 반대로 Fc만 가지고도 F를 유추할 수 있다.
		3. Fc가 포함하는 모든 FD는 어떠한 Extraneous도 포함하지 않는다.
		4. Fc가 포함하는 모든 FD의 left side, 즉 a부분은 unique하다. 
			==> a1 -> b1
			       a1 -> b2 이런 FD가 없다는 뜻
	그러면 Fc를 대체 어떻게 찾냐
		쓰도코드로 알아보자.
			먼저 Fc를 최초에 F로 초기화한다.
			그리고 Fc를 돌면서 union rule을 시행한다.
			(4번에 해당하는 성질을 만족하기 위한 것. a1->b1, a1->b2이면 a1->b1b2로 만들어버려 4번도 만족하고 축약도 시킨다.)
			4번 조건에 위배되는 FD가 없게 되었다면 이제 Extraneous를 찾는다.
			a에 해당하는 Extraneous가 있는지, b에 해당하는 Extraneous가 있는지 차례차례 찾아본다.
			만약 발견이 되면 제거를 해준다. 
			이 과정이 계속 반복되며 특정 결과에 수렴을 하게 되면, 더 이상 연산의 결과로 아무런 변화도 없게 된다.
			그 결과가 바로 Fc이다. 

		ex) R = (A, B, C)
		     F = (A->BC, B->C, A->B, AB->C) 일때 위 알고리즘을 토대로 Fc를 찾아보자.
			1. A->BC와 A->B를 보면 left side가 중복된다. A->BC로 union rule을 시행한다.
			==> 이제 F는 A->B가 빠져 F = (A->BC, B->C, AB->C)가 된다.
			여기서 이제 a 쪽의 Extraneous와 b쪽의 Extraneous를 제거해보자.
			A는 AB->C에 대해서 Extraneous이다. B->C는 F에 포함되기 때문.
			==> 이제 F는 AB->C가 빠져(B->C에서 유추 가능?) (A->BC, B->C)가 된다.
			C는 A->BC에 대해서 Extraneous이다.
			F - (a->b) U a -> (b - A) 의 결과로는 (A->B, B->C)이다. 이 2개의 FD로 A->BC를 유추할 수 있다.
									(union rule과 transitivity rule에 의해)
			따라서 C는 A->BC에서 b에 대한 Extraneous이기 때문에 C를 뺄 수 있다.
			==> 이제 F는 A->B, B->C로 축약되고, 이것이 Canonical cover가 된다.
			
		여기까지가 FD의 집합 F에 대해서 가장 간단한 형태인 Fc를 만드는 과정이다.
		
무손실 Decomposition (Lossless-join decomposition)

	기존 정보의 손실 없이 decomposition.
	릴레이션의 크기가 커지면 조인을 통해 정보의 손실이 있는지 없는지 확인하는 것도 어떠한 load(부하)가 있을 수 있다.
	그렇기에 조인을 사용하지 않고 이것을 체크하는 다른 방법이 있다.
	다음과 같은 조건 중 하나라도 만족을 한다면 무손실 분해를 만족한다.
	만약 릴레이션 R을 R1과 R2로 나눴을 때
		1. R1 ^(교집합) R2 -> R1
		2. R1 ^ R2 -> R2
		중 하나라도 만족을 하면 무손실 분해.
	
	ex) 	R = (A,B,C)
		F = (A->B, B->C)
		
		R1 = (A,B)
		R2 = (B,C)
		R1 ^ R2 = B, 그리고 B -> R2 즉, B -> BC를 만족을 하면 무손실 JOIN 분해.
			B->BC는 B->C에서 B를 augmentating 하면 만족하므로 성립.
			이 경우에는 dependency preserving도 만족한다.
		R1 = (A,B)
		R2 = (A,C) 로 쪼갤 경우
			R1 ^ R2 = A이고, A->AB를 유추할 수 있으므로 무손실 JOIN 분해는 만족하지만
			dependency preserving, 즉 의존성 보존은 만족하지 않는다.
			왜냐하면 원래 F에 B->C가 있었는데 저렇게 나누면 B와 C가 쪼개지고, B->C라는 FD를 유추할 수 없다.
			

	Dependency preservation
		
		전에도 언급했었다. 테이블을 나누면서 정규화를 할 때 의존성이 잘 보존되어야 함.
		전에 배웠던 BCNF같은 경우는 이 의존성 보존을 장담하지는 못한다.
		그렇다면 어떻게 의존성을 보존할 수 있는지에 대해 배우겠다.

		의존성 보존이 뭘까?
		일단 배경지식.
		Fi 라고 하는 FD의 set이 있고, 이 Fi는 Ri(Ri는 릴레이션 R에서 나누어진 릴레이션)에서만 해당되고, F+에 속한다. 
		다음 예제를 볼 때 참고하자.

		D라는 set에는 어떤 릴레이션 R을 n개로 나눈 R1,R2,R3....,Rn 이 모여있다고 하자.
		이때 Dependency preservation을 체크하는 알고리즘은 다음과 같다.
		D에 있는 각각의 스키마 Ri에 대해서
		Fi = The restriction of F+ to Ri 즉 Ri에만 해당되는 Fi를 찾아준다. 
		그리고 F'을 공집합으로 초기화하고 
		F1부터 Fn까지 도는데, 만약 Fi의 Closure를 구하고 이 것이 쪼개기 전의 원래 closure와 다르다면 F(i+1)을 또 Union하고
		그런 식으로 진행이 된다. (if (F'+ = F+))
		중요하진 않겠지...

		ex) 	R = (A,B,C)
			F = (A->B, B->C)
			여기서 A가 super key/candidate key라고 보면 이 form 은 BCNF가 아니다. (B->C때문. 모든 left side는 key여야 함)
			이것을 R1 (A,B), R2 (B,C)이라고 나누게 되면
			이 R1과 R2는 Lossless-join decomposition이고 Dependency preserving하게 된다. 
			(B -> BC 가 유추가 되고(Lossless-join decomposition) F+ = (F1 U F2)+ (Dependency preservation)이기 때문에)
			솔직히 왜 Dependency preservation인지는 모르겠다. 

testing for BCNF
	어떤 릴레이션이 BCNF인지 어떻게 확인을 할까?
	앞에서 배운 내용에서는 뭐 FD가 trivial인지, left side가 super key인지 등을 확인을 했다. 뭐에 대해서? F+에 대해서.
	하지만 F+에 대해서 이런 모든 검사를 진행하는건 효율적이지 못하다. 그렇다면 F에 대해서만 검사를 진행해보면 어떨까?
	F에 대해서 violation이 없으면 F+에 대해서도 그럴까?
		안된다. F에 대해 진행한 간단화된 테스트는 여러 문제를 수반할 수 있다.
		ex) R = (A,B,C,D,E),	F = (A->B, BC->D)
			여기서 R을 R1 = (A,B), R2 = (A,C,D,E)로 나눈다면
			R1은 A->B를 만족하지만 R2에서 BC->D를 유추할 수 없다. 즉 R2는 trivial한 FD만을 갖게 되는건데,
			BCNF는 슈퍼키가 left side에 있고, trivial 하기만 하면 되기 때문에 BCNF가 맞다고 판단이 되어버린다.
			여기서 F+까지 고려했을때 AC->D가 유추가 되고, 이 AC는 super key가 아니라서 결국 R2는 BCNF가 아니라고 한다.
			(왜 AC는 super key가 아니라고 단정을 지을 수 있는걸까)
			

	그렇다면 BCNF에 대한 decomposition test를 어떻게 하면 좋을까?
		첫번째는 어떤 릴레이션 R로부터 분해된 모든 Ri에 대해서 다 테스트를 해보는 것이다.
		두번째는 Ri에 포함되는 a(알파, attribute)에 대해서 a+가 Ri를 포함하거나, Ri - a의 attribute를 포함하지 않는지 체크한다.
		Ri - a에 a+가 포함되지 않는다는 것은, a가 Ri에서 a를 뺀 나머지 attribute를 결정하지 않는다는 것을 의미한다. 이것은
		trivial임을 체크하는 것을 의미한다. 그리고 a+가 Ri를 포함한다는 것은 위에서도 언급했지만 super key임을 체크하는 것이다.
		
		그리고 어떤 FD a->b에 대해서 만약 a->(a+ - a) ^ Ri 를 만족한다면 이 FD는 BCNF의 violation이다.

	어떤 릴레이션 R을 BCNF로 쪼개는 알고리즘의 쓰도코드는 ppt 참고하자.
		핵심 코드 해석만 좀 적자면 다음과 같다.
		let a->b be a nontrivial functional dependency that holds on Ri such that a -> Ri is not in F+, and a ^ b = Q(공집합)
		(이걸 해석해보자면 일단 a - > Ri 라면 a는 Ri에서 super key라는 뜻이다. 그런데 이런 FD가 F+에 없으니 a는 Ri에서 슈퍼키가 
		아니고, left side가 super key가 아닌 FD가 존재한다는 건 BCNF가 아니다.)
		여튼 이런 경우에 대해서는
		result = (R - Ri) (R에서 Ri를 제외한 나머지로 나눔) U (Ri - b) U (a,b);
		그리고 이렇게 만들어진 새로운 릴레이션에 대해 또 체크를 해보고, BCNF에 해당하지 않는다면 다시 위 과정을 반복한다.
		위에서 (a,b)는, a->b라는 nontrivial한 FD에서 a를 super key로 가지는 릴레이션을 만들어주기 위함이다.

	ex)
		R = (A,B,C)
		F = (A->B, B->C), KEY = A

		위 쓰도코드대로 따라가면, B->C가 조건문에 걸린다. (B는 super key가 아니다)
		따라서 Ri = (B,C)가 된다.
		이제 result = (R - Ri) U (Ri - b) U (a,b) 여기에 적용을 시켜보면
		A U B(여기서 b(베타)는 C이다 ) U (B,C) 이렇게 나누어진다.
		따라서 	R1 = (B,C)
			R2 = (A,B) 로 나눠진다고 하는데.... AUBU(B,C) 가 저렇게 나눠지는거 일단 이해가 안가니 외우자. 

	와 예제가 하나 더 있는데 이건 도저히 못쓰겠다. 54페이지니 꼭 가서 보자. 
	교수님께서 구글링도 활용하라고 하신다. 


	계속 언급이 되지만 BCNF는 의존성 보존을 장담할 수 없다.
	그리고 의존성 보존이 안되면 추후에 문제가 생길 수 있다. search 같은 부분에서 문제가 생긴다고 한다.
	BCNF가 의존성 보존을 하지 못한 예제 : 
		R = (J,K,L)
		F = (JK->L, L->K)
		여기서 어떻게 나눠도 JK->L 이라는 FD를 만족할 수 없다.
		왜냐하면 나눠봐야 JK KJ 이런 식으로 2개일텐데 2개로는 JK->L을 유추할 수 없기 때문.
		즉 분해를 함으로서 의존성이 보존되지 않게 된다.

	
3NF 

	BCNF의 이러한 문제들을 보완하기 위해 3NF가 등장했다고 저번 시간에 배웠다.
		3NF은 BCNF보다 weaker하다. 따라서 약간의 redundancy가 발생할 수 있다.
		하지만 3NF에서 릴레이션 R의 FD는 join 연산 없이 확인될 수 있고, (확인비용 절감)
		언제나 lossless-join 과 dependency preserving한 decomposition을 보장한다.

	뭐 조건 3개가 있고 그 중 하나만 만족하면 되고 BCNF이면 3NF이고 등등은 앞에서 살펴보았고,
	예시를 보며 3번째 조건을 조금 더 자세히 알아보자
	
	dept_advisor = (s_ID, i_ID, dept_name)
	F = (s_ID, dept_name ->i_ID; i_ID -> dept_name)
	candidate key = (s_ID, dept_name) 이고 (i_ID, s_ID)
	
	s_ID, dept_name -> i_ID 라는 FD에서는 left side가 candidate key이기 때문에 문제 없음.
	i_ID -> dept_name 에서는 b-a 에 포함된 각각의 Attribute A가 candidate key에 포함이 되어야 한다는 3번째 조건에 의거,
		b-a 는 dept_name이고, 이는 candidate key에 포함이 된다.
	즉 dept_advisor는 이런 과정을 통해 3NF를 만족하게 된다. 

testing for 3NF

	FD가 trivial 하고 left side가 super key이고 등등.... 조건을 검사하다 만족을 하면 당연히 3NF이고,
	문제는 이 2가지 조건이 아닐 때 인데, 이 조건들에 해당되지 않는다면 3번째 조건을 검사해야 한다.
	그런데 이걸 검사하는 비용이 꽤 크다. 얼마냐면 무려 검사 알고리즘의 시간복잡도가 NP - hard라고 한다.
	그런데 체크를 못하는 건 아니라고 한다. 어떻게??
	 
	일단 체크는 어려우니 넘어가신다고 하고, decomposition하는 방법만 소개를 해주셨다.
	마찬가지로 쓰도코드로 알아보자.
	
	일단 Fc를 F로 초기화하고, 이 F에 대한 Canonical cover를 먼저 구할 것이다.
			그리고 i를 0으로 세팅한다.
			그 후 Fc 안에 있는 FD a->b를 구한다. i를 i+1로 올려주고, Ri를 ab로, 위에서 구한 FD를 합쳐버린다. 
			위 과정을 Fc 안에 있는 모든 a->b에 대해서 반복한다. 
		그렇게 구한 모든 Ri들 중 R에 대해서 candidate key를 포함하는 게 하나도 없는 경우에는 
			i를 i+1로 올려주고 
			Ri에 R에서 any candidate key를 뽑아서 넣어준다.
		이제 어떤 Rj가 다른 스키마 Rk에 포함이 된다면 없애준다.
		그러면 인덱스가 하나씩 줄어들게 되고, 그것을 i = i-1로 반영을 해준다.
		더 이상 Rj가 없어지지 않을 때 남은 Ri들이 3NF이다.

	ex) cust_banker_branch = (customer_id, employee_id, branch_name, type)
		F = 
			F1. customer_id, employee_id -> branch_name, type
			F2. employee_id -> branch_name
			F3. customer_id, branch_name -> employee_id
		cust_banker_branch를 R이라고 하겠다. R은 3NF를 만족하지 않는다. 
		그렇다면 3NF를 만족하게 쪼개보자. 위에서 본 알고리즘을 토대로.

		일단 Fc를 찾아야 한다. Fc를 찾는 법은 전 시간에 배웠지만 간단하게 알아보고 넘어가자.
		1. a->b1, a->b2가 있다면 left side가 unique해야하기 때문에 union rule에 의해서 a -> b1b2로 바꿔준다.
		2. a에 Extraneous가 있는지, b에 Extraneous가 있는지 check를 하고 있으면 제거한다.  	
			=> branch_name은 F1에서 b에 대해 Extraneous다. (R.H.S라고도 표현)
			(F2에 employee_id에서 branch_name으로 direct하게 가는 FD가 있기 때문에 없어도 유추 가능)
		더 이상 Fc를 찾을 수 없기 때문에, 쓰도코드에서 Fc를 찾는 부분은 끝이 났다.
		Fc = (F1', F2, F3), F1' = (customer_id, employee_id -> type)
		
		이제 Canonical cover를 찾았으니 loop를 돌린다.
		loop를 돌면서, Fc에 a->b로 가는 FD가 있으면 ab로 만든다. (알파와 베타를 붙인다.)
			==> ab = R1
		이런 식으로 a와b를 모두 붙여서 relation을 만들면 결과는 다음과 같다.
			R1 = (customer_id, employee_id, id_type)
			R2 = (employee_id, branch_name)
			R3 = (customer_id, branch_name, employee_id)
		이제 여기서 검사를 한다.
		R1을 보면 customer_id와 employee_id가 candidate key에 포함이 된다고 한다. => 만족 (예제에는 candidate key명시가 안되어있다...)
		그리고 R2는 R3에 포함이 된다. 쓰도코드를 보면 다음과 같은 부분이 있다.
			"어떤 Rj가 다른 스키마 Rk에 포함이 된다면 없애준다."
			이 로직에 따라 R2는 R3에 포함이 되기 때문에 없애준다.
		
		이 연산의 결과로 남은 R1과 R3가 3NF를 만족하게 된다! 

	3NF에서는 
		Decomposition is lossless
		Dependencies are preserved

	BCNF에서는
		Decomposition is lossless
		it may not be possible to preserve dependencies



Multivalued dependency를 다루는 Decomposition
	
	한 attribute에, 만약 전화번호라는 attribute가 있다면 전화번호가 여러개 들어갈 수도 있다.
	관련 예제는 ppt 참고. 이 예제는 BCNF를 만족하는데,  non-trivial 한 FD가 없다.
	하지만 여기에는 문제가 있는데, Insertion anomaly가 생기다고 했었다.
	한개에만 넣으면 되지만 쓸데없이 두개에 다 넣어줘야 하는 상황인 것이다.
	이걸 막기 위해서 4NF를 사용했었다.

	Multivalued dependencies : MVDs

		그냥 이 부분은 ppt 65.p 보면서 이해하자. 

		a = ID, b = phone
		
			t1[a] = t2[a] = t3[a] = t4[a] = 99999로 모두 동일하다
			t3[b] = t1[b] = 512-555-1234로 동일하다
			t3[R-b] = t2[R-b] = (99999, William)으로 동일하다
			t4[b] = t2[b] = 512-555-4321로 동일하다
			t4[R-b] = t1[R-b] = (99999, David)로 동일하다
		이런 테이블을 그냥 멀티벨류드 테이블이라고 한다. 당연한 것,

		저 테이블에서 ID = Y, name = Z, phone = W라고 하면
		우리는 Y ->> Z (Y multidetermines Z) 라는 것을 알 수 있다.
		(위 관계는 함수는 아니.다함수는한개의 숫자에 한개만 매핑이 되기 때문)
		위 예제에서 Y ->> Z는 Y->>W를 따른다고 한다.

		Y의 value가 주어졌을 때 그것은 Z의 value와 W의 value와도 관계가 있다는 것을 알 수 있음.
		그런데 여기서 Z와 W는 서로 독립적이고, 영향을 주고받지 않는다.

		만약 Y->Z이면 Y->>Z도 성립한다. (역은 성립하지 않음)
			==> Z는 Y에 의해서 좌지우지되고, 그 Z가 여러개여도 좌지우지되는 건 똑같다고 한다.

		만약 a ->> b이면 a->>R - a - b도 성립한다.
			==>그냥 참고만 하랜다.

		우리는 MDVs를 2가지 방법으로 사용할 수 있다.
			1. 주어진 함수적 종속과 다중값 종속관계가 적법한지 검사하기 위해서 사용 
			2. 적법한 릴레이션의 집합에서 제약조건을 명시하기 위해서 사용될 수 있음

4NF

	4NF를 설명하기 위해 위를 소개한 것 같다,
	핵심은  insertion anomaly를 제거하기 위한 것.
	만약 D가 Functional , Multivalued dependy의 집합이고, D+에서 a->>b라는 multivalued dependency를
	뽑았다고 할 때 아래 조건 2가지 중 하나라도 만족하면 4NF이다.
		1. a ->> b가 trivial하다.(a U b = R이면 trivial하다고 한다.) 
		2. a가 R에 대해서 sueprkey이다.

4NF의 decomposition

	Restriction of multivalued dependencies : 
		Ri의 restriction에 해당하는 D는 Di라고 부를 수 있다.
		restriction의 내용은 다음과 같다.
			1. D+의 모든 FD는 Ri의 Attribute만을 포함해야 한다.
			2. 모든 multivalued dependencies 가  a->>(b^R)의 form을 가질 떄
				==> 조건은 ppt에서 보자
		이런 경우 Ri에 대한 Di라고 할 수 있다.

		그리고 이 Di와 Ri는 4NF decomposition algorithm에서 사용된다.

	ex)	R = (A,B,C,G,H,I)
		F = (A->>B, B->>HI, CG->>H)
		여기서 R은 4NF가 아니다. A->>B의 A가 R의 super key가 아니기 떄문.
		이런 경우 A->>B에서 A,B를 묶어버린다.
			R1 = (A,B)
		그리고 쓰도코드의 공식을 사용하면 R2는 다음과 같이 나온다.
		(공식이 대충 (a-R1) U (R-b)뭐 이런 식이었는데 제대로 못봤다)
			R2 = (A,C,G,H,I)
				==> R2는 4NF가 아니다. non-trivial이고 superkey가 아니다. 따라서 다시 R3과 R4로 나눈다 
			R3 =  (C,G,H)
				==>CG->>H를 a와b로 보고 묶어서 나옴.
			R4 = (A,C,G,I)
				==> 4NF가 아님. 다시 R5와 R6로 나눔
			R5 = (A,I)
				==> 와 진짜 이건 설명을 들어도 무슨 말인지를 모르겠다.
				A->>B와 B->>HI를 통해서 A->>HI가 유추되고, R4에 H가 없어서
				R4에 Restriction으로 A->>I가 된다 라고 하는데 이게 대체 무슨 말이지....
			R6 = (A,C,G)
				==> 나머지들

 
	==> 과제하면서 본 점 : 4NF로 decomposition할 떄 A->>B라면 이 두개를 합치는 분해를 한다. 위에서 얘기했던 내용이지만 다시 짚고 넘어가자.