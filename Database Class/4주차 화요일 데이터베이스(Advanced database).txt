API
	데이터베이스와 프로그램간의 데이터를 주고받을 수 있게 만들어주는 일종의 장치
	
		JDBC : 자바의 데이터베이스 커넥션을 위한 것.
		ODBC : C, C++, C#등의 데이터베이스 커넥션을 위한 것.
		EMBEDDED SQL : 보다 다양한 언어에서 SQL을 사용하기 위한 것.

	java.sql.Connection
	java.sql.DriverManager
	java.sql.SQLException
	java.sql.Statement

	Statement stmt = null;
	try {
		stmt = con.createStatement();
		String update = "쿼리문";
		int count = stmt.executeUpdate(update);
		System.out.println(count);
	}catch(SQLException e1) { e1.printStackTrace(); }

	==> update 문자열에 들어간 쿼리문에 의해 영향을 받은 데이터의 수를 출력해주는 프로그램.
	자바와 데이터베이스의 연동은 이렇게 이루어진다.
	물론 데이터베이스를 처음 들고오고, 또 연산이 끝났을 때 데이터베이스를 닫는 명령어는 따로 있다. ppt 참고.
	
	 위에서는 카운트 변수를 통해 개수만 출력하였다. 그렇다면 쿼리의 결과는 어떻게 불러올까?
	Statement를 통해 "날린" 쿼리의 결과는 ResultSet 이라는 클래스의 오브젝트로 받아올 수 있다.

Statement stmt = null;
ResultSet rs = null;
try {
	stmt = con.createStatement();
	String sql = "select name, course_id from instructor natural join teaches";
	rs = stmt.executeQuery(sql);
	while (rs.next()) {				//rs에 값이 있는 동안
		String name = rs.getString(1);		//getString이라는 함수와 인덱스를 통해 변수에 저장 가능
		if (rs.wasNull()) name = "null"		
		String course_id = rs.getString(2);	//마찬가지로 변수에 저장 가능
		if (rs.wasNull()) course_id = "null";
			System.out.println(name + "\t" + course_id);		//출력
		}
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		try {
		if (stmt != null && !stmt.isClosed()) stmt.close();
			if (rs != null && !rs.isClosed()) rs.close();
		} catch (SQLException e1) {
			e1.printStackTrace();
}
	
	
	이렇게 자바에서 db에 접근할 때, 만약 테이블을 업데이트 한다고 하자.
	insert into table value(attr1, attr2, attr3 ... ) 이렇게 값을 넣을텐데, 자바에서는 넣을 값을 몰라도 나중에 입력을 받던가 해서 넣을 수 있다.
	아래는 그 예시이다.
		PreparedStatement pstmt = null;
		try {
			String psql = "insert into instructor value (?, ?, ?, ?)";
			pstmt = con.prepareStatement(psql);
			String id = "12345", name = "Neumann", dept_name = "Biology";
			int salary = 98000;
			pstmt.setString(1, id);
			pstmt.setString(2, name);
			pstmt.setString(3, dept_name);
			pstmt.setInt(4, salary);
			int count = pstmt.executeUpdate();
			System.out.println(count);
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
	일종의 Frame을 지정하고 나중에 입력을 받던, 다른 연산을 수행한 데이터를 넣던 넣을 수 있게 됨.
	이와 같은 연산을 수행하기 위해서는 PreparedStatement 오브젝트가 필요하다.
	

	Metadata
		데이터베이스에서 메타데이터는 열의 이름, 데이터 타입 등에 해당한다. 그리고 자바 프로그래밍에서 데이터베이스에 접근하여
		데이터를 읽고 쓸려면 이 메타데이터가 정말 중요하다. 사용법은 다음과 같다.
		
		ResultSetMetaData rsmd = rs.getMetaData();	//rs는 앞에서 나왔던 쿼리문의 결과를 받은 오브젝트.
		for(int i =0; i <= rsmd.getColumnCount(); i++) {
			System.out.print(rsmd.getColumnName(i) + "( );
			System.out.print(rsmd.getColumnTypeName(i) + ")\t");
		}
		System.out.println();
		
		==> result : 
			ID(VARCHAR)	name(VARCHAR)	dept_name(VARCHAR)	salary(DECIMAL)

		