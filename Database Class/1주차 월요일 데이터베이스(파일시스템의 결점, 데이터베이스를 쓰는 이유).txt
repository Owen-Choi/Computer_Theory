책 꼭 구하기(과제가 책에서 나옴)
질문은 사이버 캠퍼스로만 받겠음
과제는 메일로 보내면 안됨. 사이버캠퍼스에 제출하기


database가 가장 싫어하는 것 : 중복과 일관되지 않은 상태
contraints of ~ 무결성 제약조건 : 예를 들어 나이가 음수가 되서는 안됨. 기존의 파일 시스템은 이것을 알려 줄 길이 없지만
DBMS는 이것이 가능하다.

atomicity of updates : 파일 시스템에서는 이것을 해결하기 쉽지않다.
데이터의 업데이터가 일어나면 쪼개져서는 안된다는 뜻이다.(A가 B에게 송금을 했다면 데이터가 쪼개져선 안되고 동시에
처리 되어야 함)

concurrent access by multiple users : 동시에 여러 유저들이 사용할 때 파일 시스템은 불안전할 수 있다.
(통제되지 않는 다중 사용자의 사용은 데이터가 일관되지 않은 상태가 되게끔 만든다.)

Logical schema : 데이터베이스의 logical한 구조...?
내 생각에는 테이블의 열 과 같이 어떤 종류의 데이터를 넣을 지 정하는 것 같다. 

Physical schema : 실제로 저장할 위치? 학생의 이름은 하드디스크 어디에 저장하고..
즉 실제 시스템에 관한 것들.

이 둘은 어떤 프레임이라고 생각하면 된다.

Instance : 실제로 데이터베이스에 저장된 값. 
인스턴스는 위의 두 프레임에 들어가는 값이다.

Physical data independence : 시험에 나온다!

만약 하드디스크를 바꾸는데, 로지컬 스키마도 바꿔야 하나..? --> 바꾸지 않는 것이 당연한것,
반대도 마찬가지. 로지컬 스키마를 변경할 때 하드디스크를 몽땅 바꿔야하나...? --? 바꾸지 않는것이 당연한 것

physical data indepence는 둘 중 한쪽이 바뀌어도, 서로 독립성을 띄고 서로에게 종속적이지 않는 것.

=====================================================================

1. data redundancy and incosistency

	파일과 응용 프로그램을 만든 프로그래머는 서로 다른 사람들, 그리고 언어가 다르거나 형식이 다를 수도 있다.
	그리고만약 학생이 2개의 전공을 가지고 있다면 학생의 정보, 이름이나 주소같은 것들이 각각의 전공마다 저장이 되어있어야 한다.
	이런 중복은 저장과 검색등에서 높은 비용을 초래한다. 
	또한 이것은 데이터 불일치로 이어질 수도 있는데, 한 전공에서 정보가 바뀌었는데 다른 전공에서 바뀌지 않는 경우가 그 예이다.

2. Difficulty in accessing data
	
	만약 대학교의 직원 중 한명이 특정 지역에 사는 학생을 찾아야 한다고 생각해보자.
	처음 시스템을 설계한 디자이너가 없고, 직원은 모든 학생의 리스트를 얻을 수 있는 프로그램만을 사용할 수 있다.
	여기서 직원은 2가지 선택지를 가진다. 모든 학생의 리스트에서 해당 지역의 학생을 뽑아낼지, 아니면 프로그래머에게 새 프로그램을
	만들어달라고 요청할 지. 두가지 모두 효율적인 방법이 아니며, 만약 프로그램을 새로 만들었을 때, 일주일 뒤 직원이 다른 정보의
	학생리스트를 뽑을려면 또 프로그램을 만들어야 한다.

3. Data isolation

	데이터가 많은 파일에 걸쳐서 흩뿌려져있고, 각각의 파일들은 형식이 다르다. 따라서 원하는 데이터를 얻는 새로운 프로그램을 
	만드는 것에 많은 어려움이 있다.

4. integrity problems
	
	database에 저장된 데이터들은 특정한 consistency constraints를 지켜야 한다.
	만약 은행의 계좌 데이터의 값이 0 이하로 떨어지면 안될 때, 프로그래머들은 이 것을 프로그램의 조건코드를 추가하여 구현할 수 있다.
	하지만 새로운 조건이 추가되거나 삭제될 경우 이 것은 번거로울 수 있다. 또 조건의 데이터가 서로 다른 파일들에 있을 경우
	번거로울 수 있다.

5. Atomicity problems 

	만약 A학과가 B학과에게 500달러를 보낸다고 생각해보자.만약 이 과정에서 failure가 일어날 경우 A학과에서 500달러가 차감되고,
	B학과에서 500달러를 받지 못한는 경우가 생길 수 있다. 이 것은 데이터 불일치를 초래할 수 있다.
	이 경우 돈을 보내는 것과 받는것이 둘 다 일어나거나 아예 일어나지 말아야 한다. 이렇게 나눠져서 일어나지 않고 통일되게 일어나야 하는것.
	File-processing system에서는 이것에 대비하기가 힘들다고 한다.
6. concurrent-access anomalies

	A학과는 10000달러를 가지고 있고, 만약  동시에 A학과에게 500달러와 100달러를 요구하게 된다면, concurrent-access를
	제대로 처리하지 못할 경우 9500달러 혹은 9900달러가 남게 된다. 9400달러가 남아야 하지만 9500달러 혹은 9900달러가 남기
	때문에 데이터 불일치를 초래한다.
	또 다른 예로, 만약 등록학생의 수가 40명 제한이고, 이 수를 넘지 않으면 학생을 등록시켜주는 프로그램이 있다고 가정하자.
	만약 현재 등록학생 수가 39명인데 concurrent request가 들어왔을 경우, 프로그램은 두명의 학생을 모두 받아들이고
	등록학생의 수는 41명이 되게 된다.

7. Security problems

	데이터베이스에서 어떤 사용자도 모든 데이터에 접근할 수 있어서는 안된다. 재무 관련 사용자는 관련 값만을 보면 되고, 그들이 다른 
	정보를 볼 필요는 없다. file-processing system에 기반을 두는 application program은 이러한 제약조건을 두기가 어렵다.
