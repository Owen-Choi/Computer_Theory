문자 함수
	
	대/소문자를 바꿔주는 함수들 
		UPPER : 괄호 안 문자 데이터를 모두 대문자로 바꿔줌
		LOWER : 괄호 안 문자 데이터를 모두 소문자로 바꿔줌
		INITCAP : 괄호 안 문제 데이터 중 첫 글자만 대문자로, 나머지는 소문자로 반환
	
	ex) SELECT UPPER(ENAME)
		FROM EMP;	
	
	만약 게시판의 제목에 Oracle 문자열이 포함된 데이터를 검색하고 싶다면 다음과 같은 쿼리문을 이용할 수 있다.
	
	SELECT *
		FROM 게시판 테이블
	WHERE 게시판 제목 LIKE '%Oracle%';

	하지만 위의 SELECT문의 경우 제목에 ORACLE이나 oracle 등과 같이 대소문자가 다르다면 검색할 수 없다.
	이럴 때 사용할 수 있는 방법이 문자 함수를 이용하는 것이다.

	SELECT *
		FROM 게시판 테이블
	WHERE UPPER(게시판 제목) LIKE UPPER('%oracle%');
		==> 대소문자에 관계없이 ORACLE을 포함한 모든 게시판의 제목이 검색됨.


	문자열의 길이를 구하는 함수
		LENGTH : 괄호 안 열의 문자 데이터의 길이를 구해주는 함수
		구해진 문자열을 띄우는 열이 새로 생성된다.
	
	SELECT ENAME, LENGTH(ENAME)
		FROM EMP;

	열이 새로 생성되기 때문에 WHERE절과도 함께 쓸 수 있다.
	
	SELECT ENAME, LENGTH(ENAME)
		FROM EMP
	WHERE LENGTH(ENAME) >= 5;

		==> ENAME 열에서 문자열 데이터의 길이가 5 이상인 데이터만 출력된다.

	문자열의 바이트 수를 구하는 함수
		LENGTHB : 괄호 안 열의 바이트 수를 구해주는 함수
		구해진 바이트 수를 띄우는 열이 새로 생성된다.

	
	문자열의 일부를 추출하는 함수
		SUBSTR : 문자열의 일부를 추출하여 반환
			SUBSTR(문자열 데이터, 시작위치, 추출 길이)
				문자열 데이터의 시작 위치부터 추출 길이만큼 추출. 추출 길이가 음수일 경우
				마지막 위치부터 거슬러 올라간 위치에서 시작.
			SUBSTR(문자열 데이터, 시작위치)
				문자열 데이터의 시작 위치부터 문자열 데이터 끝까지 추출. 추출 길이가 음수일
				경우 마지막 위치부터 거슬러 올라간 위치에서 시작.

			SELECT JOB, SUBSTR(JOB, 1,2), SUBSTR(JOB,3,2), SUBSTR(JOB, 5)
				FROM EMP;
					==> 출력 결과는 SALESMAN 이라는 데이터에 한해 각각
					1. SA, LE, SMAN 이다.

		SUBSTR의 인자로 다른 함수의 RETURN 값을 사용할 수도 있다.
		
		SELECT SUBSTR(JOB, -LENGTH(JOB))
			FROM EMP;
				==> JOB의 데이터와 동일한 데이터가 출력된다.
		SELECT SUBSTR(JOB, -LENGTH(JOB), 2)
			FROM EMP;
				==> SUBSTR(JOB, 2)와 동일한 데이터가 출력된다.
					ex) SALESMAN -> SA
		
	문자열 데이터 안에서 특정 문자 위치를 찾는 INSTR 함수
		INDEX_STRING의 약자인 듯 하다. 인자로 4개가 올 수 있고, 2개의 인자는 필수로 받아야 한다.
		      INSTR([검색대상 문자열 데이터 (필수)],
			[위치를 찾으려는 부분 문자(필수)],
			[위치 찾기를 시작할 대상 문자열 데이터 위치(선택, 기본값은 1)],
			[몇번째로 찾은 문자의 인덱스를 반환할 지 지정(선택, 기본값은 1)])

		SELECT INSTR('HELLO, ORACLE!', 'L') AS INSTR_1,
			INSTR('HELLO, ORACLE!', 'L', 5) AS INSTR_2,
			INSTR('HELLO, ORACLE!', 'L', 2, 2)AS INSTR_3
		FROM DUAL;

	다음과 같은 쿼리문으로 LIKE 문과 같은 효과를 얻을 수도 있다.

		SELECT *
			FROM EMP
		WHERE INSTR(JOB, 'S') > 0;

			==> S로 시작하는 직업을 출력하는 쿼리문

		SELECT *
			FROM EMP
		WHERE JOB LIKE '%S%';
		
			==> 위의 결과와 동일한 쿼리문

			* INSTR 함수를 LIKE 연산자처럼 사용하는 방식은 자주 사용하는 표현은 아니라고 함.
