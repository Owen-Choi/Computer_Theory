테이블의 데이터를 조회하는 3가지 방법 :

	1. 셀렉션
		셀렉션은 행 단위로 데이터를 조회하는 방식.
	2. 프로젝션
		프로젝션은 열 단위로 데이터를 조회하는 방식
	(셀렉션 && 프로젝션)
		둘을 함께 사용하면 원하는 행의 원하는 열을 불러와 더 구체적인 열람이 가능해진다.
	3. 조인
		두개 이상의 테이블을 양옆에 연결하여 데이터를 조회할 수 있다.
		(외래키의 예시를 생각해보면 이해하기 쉽다)

SELECT 절과 FROM절 :

	SELECT절은 FROM절에서 명시한 테이블 안의 행을 지정하여 데이터를 조회할 수 있음.
	FROM절은 SELECT절의 명령어를 통해 조회할 테이블을 지정할 수 있음.

	ex) SELECT [열1], [열2], ... , [열N]
	     FROM [테이블 명];

	==> SELECT * FROM EMP;

	==> SELECT EMPNO, DEPTNO
	       FROM EMP;
	(띄어쓰기와 줄바꿈이 권장됨. 실무에서는 SQL문이 상당히 길어져 가독성이 굉장히 중요하다고 한다)

중복제어 DISTINCT, ALL

	1. DISTINCT : SELECT문에서 선별된 데이터의 중복을 제거해준다. SELECT절에서 열 이름을 명시하기 전에 명령어를 사용한다.
		ex) SELECT DISTINCT EMPNO
			FROM EMP;
		만약 열이 여러개라면?
			SELECT DISTINCT JOB, DEPTNO FROM EMP;
			==> 두가지 열의 데이터를 조합해서 비교. 즉, 하나의 열의 데이터만 중복되는 경우는 삭제하지 않음

	2. ALL : 데이터의 중복을 제거하지 않음. SELECT절에서 열을 지정하기 전에 별도의 명령어가 없으면 DEFAULT로 지정된다.
		ex) SELECT ALL EMPNO
			FROM EMP;

열(COLUMNS)
	
	1. 열의 연산
		연산 기능을 수행하여 결과값을 저장하는 열을 별도로 생성할 수 있다. 어디서? SELECT 절에서.
			ex) SELECT ENAME, SAL, SAL*12+COMM, COMM
				FROM EMP;
		위와 같은 SELECT 문의 결과로 출력되는 테이블에는 SAL*12+COMM 이라는 이름의 새로운 열이 생성되어 연산 결과를 담고있다.
		* 만약 연산에 사용되는 열 중에서 하나라도 데이터가 없다면(NULL) 연산 기능을 수행하는 열에는 NULL이 들어간다.
		쉽게 말해서 해당 행은 비어있게 된다.

	2. 별칭 지정
		위와 같이 연산식이 길어지면 데이터의 노출과 불편함이 생긴다. 따라서 열의 이름을 따로 지정해주는 명령어를 사용한다.
		명령어는 다음과 같다.
			1. (연산식) (별칭)
			2. (연산식) "(별칭)"
			3. (연산식) AS (별칭)
			4. (연산식) AS "(별칭)"
		실무에서는 보통 3번을 선호한다고 한다. 이유인 즉슨 AS 명령어로 인한 가독성 때문.
		ex) SELECT ENAME, SAL, SAL*12+COMM AS ANNSAL, COMM
			FROM EMP;
		* 큰 따옴표는 거의 사용하지 않는다고 한다. 이유는 다음과 같은 상황 때문.
		String sql = "SELECT ENAME, SAL, SAL*12+COMM AS ANNSAL", COMM FROM EMP";
		문자열이 분리되어 예외상황이 발생해버린다.