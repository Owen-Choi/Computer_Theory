4장에서 subnet이라는 내용을 다뤘다.
하나의 라우터를 거치지 않고 통신을 할 수 있는 하나의 그룹
와이파이든 유선 랜이든 하는 것들로 연결이 돼서 IP 프로토콜이 없이도 직접적으로 통신이 가능한 네트워크.


adjacent node : 물리적으로 인접한 노드들을 연결한 communication channel
	유선이 있고 무선이 있을 수 있다. 그리고 이런 것을 통해서 LAN(Local Area Network)을 구성한다.

	link layer에서는 데이터그램, 패킷 등을 frame이라고 부른다.
	링크 레이어는 어떤 일을 할까?
	what is responsibility of the link layer?
		==> transferring datagram from one node to physically adjacent node over a link
		우리가 서울에서 교토로 여행을 간다고 해보자
		공항까지 버스를 타고, 공항에서 비행기를 타고, 공항에서 신칸센을 타고 교토까지 갈 수 있다.
		여기서 source는 서울이고, destination은 교토이다.
		여기서 우리 스스로는 패킷이다.
		그리고 여행사가 라우팅 알고리즘을 통해서 어디로 가야하는지 알려주고,
		여기서 버스, 공항, 지하철 등이 링크 레이어이다. 

		링크 레이어는 어디에서 구현이 될까?
		NIC에서 구현된다. 
		일반적으로 링크 레이어는 하드웨어와 소프트웨어가 만나는 지점을 담당하고 있다.
			ㄴ 즉 하드웨어와 소프트웨어가 반반씩 섞인 레이어라고 생각할 수 있다.
		링크 레이어의 아래에는 피지컬 레이어가 있고, 이 피지컬 레이어에서 하드웨어끼리 정보를 주고받는다.
		 


=============================

Error detection

	링크레이어가 해야 하는 가장 기본적이고 중요한 미션은 인접한 노드 사이의 reliable한 전송을 수행하는 것이다.
	하나의 프레임이 한 hop을 제대로 전송되게 하는 것이 링크 레이어의 역할이다.
	여기서 에러를 잘 파악하기 위해 링크 레이어는 받은 데이터그램에 대해 Error Detection 혹은 Error correction을 할 수 있는 
	추가적인 값을 붙여서 보낸다. 이것을 EDC라고 한다. 여기서 correction은 에러가 났을 때 그것을 복구까지 할 수 있는 값을 의미한다.
	checksum과 비슷한 역할.

	간단하면서도 어느 정도 에러를 잘 발견할 수 있는 기법중 하나가 parity checking이다.
	홀짝홀짝을 이용하는 것이다.
	만약에 앞에 9개의 비트가 있다면, 이를 짝수개로 맞춰주기 위해 1을 하나 더 넣어준다. 
	짝수면 0을 넣고, 홀수면 1을 넣어주는 전략. 이럴 때 전송된 프레임이 홀수이면 뭔가 문제가 생겼음을 알 수 있다.
	하지만 2개 이상의 비트가 에러에 의해서 뒤집혔다면 이를 찾을 수 없다. 

	이를 좀 더 강력하게 할려면, 이를 조금씩 세분화해서 이차원 배열의 형태로 사용할 수 있다. 
	
	더 강력한 방법은 Cyclic redundancy check이다.
	참고만 하자. 모듈러를 이용한 체크 방식이라고 한다.


==========================================

LAN

	6장에서 제일 핵심이 되는 부분

	링크레이어는 IP주소 체계를 쓰지 않고 별도의 주소 체계를 쓴다.
	이 주소 체계를 MAC이라고 한다.
	그리고 이 MAC은 링크 레이어에 할당된 것이 아니라 NIC에 할당된 하드웨어 주소라고 생각하면 된다.
	맥주소는 사실상 변하긴 하지만 변하지 않는다고 생각하고 접근하면 된다.

	왜 맥주소를 쓸까? 아이피 주소를 쓰지 않고?
	(IP 주소는 DHCP 등에 의해서 우리의 장소에 따라 계속해서 바뀌게 된다.)
	맥 주소는 hop by hop, 즉 네트워크 상에서 노드와 노드 사이 한칸의 전송을 위해 사용되는 주소이다.
	아이피 주소는 end to end, 즉 호스트와 호스트 사이의 전송을 위해 사용되는 주소이다.
	어쨌든 우리가 목적지로 가기 위해서는 여러번의 hop을 거쳐야 한다. 그리고 최종 목적지의 ip 주소에 따라 맥주소도 달라지게 된다.
	둘이 서로 연관이 있음을 말하고 싶은 듯

	링크 레이어에 초점을 맞추면 한 링크를 지날 때 그 링크 마다 맥주소들이 아이피주소와 묶여서 이 아이피 주소로 가기 위한 맥들이
	어떤 것들이 있을까 하는 정보들이 공유가 되어야 한다.
	
	그렇다면 아이피 주소를 가지고 어떻게 맥 주소를 알아올 수 있을까?
	이것에 대한 것이 ARP이다.  내가 ~~한 IP 주소를 보낼려면 그것에 해당하는 맥주소는 뭐냐 라는 것을
	알아올 수 있는 방법이 필요한다. DNS와 비슷하다고 하는데 어떤 면에서 비슷하지?
	여튼 ARP는 broadcast와 비슷하게 ~~~IP를 가지고 있는 사람은 맥을 보내줘~~ 하고 요청을 보내면
	그 IP에 해당하는 노드(호스트)가 자신의 맥을 보내준다. 


==================================================

응용프로그램에서의 메세지를
layer4에서는 segment라고 부름
segment가 아래로 내려가면 datagram이, 더 아래로 내려가면 frame이 된다.

즉 message -> segment -> datagram -> frame이 된다.

링크레이어는 하드웨어와 소프트웨어 반반이다.

일반적으로 NIC는 2개임. 참고.

위에서도 말했지만 최종 IP로 가기 위해 한칸 한칸 이동하기 위해서 맥 주소가 사용된다.

32페이지 아주 중요, src dst 주소들 채울 수 있어야 한다.


======================================================

Ethernet
	
	유선 LAN이다. 
	이더넷에는 bus, star 방식이 있다.
		bus 방식은 모든 노드에게 신호를 보내고, 노드가 자신에게 해당되지 않으면 신호를 무시한다.
		동시에 2개 이상의 노드가 신호를 보낼 수 없기 때문에 동시에 신호를 보내면 오류가 발생한다. (collision, 충돌)
		옛날 방식임

		star방식은 스위치(공유기)를 기점으로 노드들이 연결되어있다. 
		공유기와 노드 간의 링크? 에서만 신호교환이 이루어짐(일대일)
		그렇기 때문에 충돌이 일어나지 않는다.

	이더넷은 보낸 쪽 NIC로 피드백을 주지 않는다. 즉 에러가 생겨서 drop을 하든 받아들이든 상대에게 이것을 알려주지 않는다.
	링크레이어에서 드랍이 됐든, TCP 딴에서 드랍이 됐든, 앞에서 배웠듯이 상위 계층에서 발견이 된다.
	유선 랜은 에러가 거의 발생하지 않는 환경이고, loss가 될 확률은 매우 낮다.따라서 에러 체크를 안한다. 간혹 잃어버리는 한두개를 위해서
	항상 체크하는 것은 비효율적이기 때문.

	무선링크의 경우 링크레이어에서 ARQ를 쓰기도 한다. 무선 환경에서는 손실이 많이 일어나기 때문.
	하지만 Ethernet은 유선이라는 점.

Switch

	게이트웨이 라우터를 거쳐서 들어온 서브넷 안에 다시 라우터가 있는 경우는 드물다. 아주 규모가 큰 네트워크에서만 그렇고, 
	대부분 이 서브넷 안에는 스위치가 있다. 스위치는 layer2, 링크레이어에 속한 장비이다. 그리고 레이어의 핵심 장비이다.
	6-4 슬라이드 중요.

	store and forward, selectively forward, transparent, plug and play, self-learning

		store and forward C라는 애가 B로 보내고싶으면 스위치는 C로부터 받은 정보를 B에게 보낸다. 이것이 store and forward?
			dummy switch : 신호를 보낸 노드 빼고 모든 노드에게 신호를 전달하는 바보같은 공유기
		transparent : 노드가 데이터를 받을 때 스위치로부터 받았다는 것을 느끼지 못하고 노드로부터 바로 받았다고 인식한다.
		스위치는 plug and play 방식으로 동작한다.
			즉 세팅과 같은 사전 작업이 필요없고 바로 동작한다.
		그리고 스위치는 self-learning 한다.
			아무런 설정정보 없이 혼자 학습한다. 지나다니는 패킷을 보면서 "아 이건 여기로 보내면 되겠구나" 하고 차차 배워간다.

	스위치는 버스와 다르게 동시 전송이 가능하다. 
	하지만 같은 목적지에 대해 동시에 데이터를 전송하는 것은 안된다.
	스위치도 forwarding table을 가지고 있다. 하지만 라우터와의 차이점은 스위치는 IP주소가 아닌 맥주소를 담고있다.
	또 라우팅 테이블은 라우팅 알고리즘에 의해 결정되는 데 반해 스위치 테이블은 self learning을 통해 스스로 채워진다.
	스위치는 어떻게 1번 포트가 A라는것을 알까? A가 신호를 보내면 거기에 목적지 주소와 도착지 주소가 있으니 그것에 기반하여 self learning한다.
	들어오는 패킷을 보고 보내는 포트의 정보를 파악한다. 그리고 이 정보를 학습하고, 보내는 포트의 정보가 여태까지 학습한 데이터에 없으면
	Flooding을 한다.

	문제 : 
	만약 A가 A'에게 신호를 보내고, A'이 다시 A에게 회신을 보낼 때 hop은 총 8번 일어난다. 6-10 참고
	그리고 self learning은 A가 스위치에게 데이터를 보냈을 때 1번, A'가 스위치를 보냈을 때 1번 총 2번 일어난다. 
	6-12 , A가 G로 데이터를 보내고, G가 A에게 다시 회신을 하는 경우 몇번의 링크를 거칠까?
	16번이다. 14번이 아닌 이유는 S3에서 G,H,I를 모두 보기 때문이다.
	그리고 self learning은 총 7번 일어난다. A가 G로 갈때 4번 , 돌아올때 3번이 일어난다.
	1시간 25분 참고.
	E는 G로 가는 길을 모르고, 그렇기 때문에 4번의 링크 이동이 일어나고,  E에서 G로 이동하는데 3번의 링크 이동이 일어난다.
	


라우터와 스위치의 공통점은 forwarding table에 따라 목적지를 결정한다.
차이점은 우선 담당하는 계층이 다르다.

	가상랜 : 
		물리적으로는 다른 곳에 연결되어있지만 같은 그룹으로 엮일 수 있게 하는 것.
		
	만약 학교에 와서 학교 컴퓨터를 켜서 구글에 접속한다고 생각해보자.
	처음 컴퓨터를 켜서 DHCP가 돌아가는 라우터에게 IP 주소와 로컬 DNS정보를 받아온다.
	ㅅㅂ 소리 녹화가 안됐네...?
		DNS 정보를 받아오고 ARP를 통해서 맥 주소로 노드에게 가고, 등의 과정을 거친다.
		IP를 받은 뒤 웹 이기 때문에 HTTP connection을 맺어야 하고, 이를 위해 TCP 핸드쉐이크 과정을 거친다.
		여기서 SYN ACK이 사용된다. 
		전반적인 구조는 이와 같았다. 
	