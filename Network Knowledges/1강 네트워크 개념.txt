	Communication networks : 커뮤니케이션을 전달할 수 있는 하나의 인프라, 시스템
			아주 오래 전부터 존재했다. 예) 봉화, 고을마다 있던 마구간 등

	
	Computer Network : 일반적으로 현재에 사용되는 network는 computer network를 지칭
		사전 정의 : 특별한 하드웨어와 소프트웨어를 이용해서 물리적으로든 논리적으로든
			서로연결되어있는 컴퓨터와 하드웨어 구성요소들의 집합.

		Node : host가 조금 더 정확한 표현이라고 한다(네트워크에서는)
		노드를 연결하는 것을 링크라고 한다. 링크 꼭 기억하기.
		
		노드는 네트워크에서 점으로 표현되는 경우가 많다. 따라서 point라고도 부른다.
	
	Direct :   point to point link를 일컫는다. 즉 노드와 노드가 direct로 연결된 링크를 의미
	
	실제적으로 인터넷에서 호스트의 데이터, 정보를 만들어내는건 호스트 안에서 실행되고있는
	프로그램이 만드는 것이다.
	
	Indirect : 집에서 학교까지 올 때 도로가  하나가 있는 것이 아니다. 중간중간 수십개의
	교차로를 지나야한다. 인터넷에서도 두개의 호스트가 데이터를 주고받는 상황에서 중간 링크가
	하나만 있는 경우는 드물다.
	여기서 중간에 있는 간접 링크들을 indirect link라고 하고, 대표적인 네트워크 장비가 스위치이다.

	Switch : 기찻길의 선로를 바꿔주는 장치를 생각하면 될 것 같다. 가야할 길을 전환시켜준다고
	생각하면 될 것 같다. (들어온 데이터의 목적지(데이터의 헤더부분)에 따라 그때그때 
	길을 열어준다고 생각하면 될듯.)

	스위치를 활용하여 indirect link를 구성하는 경우를 Switched network 라고 부르기도 한다.
	
	데이터가 너무 길다면 링크에서 여러가지 문제가 생기기 마련이다. 그래서 Packet을 쓴다.
	패킷이 너무 크다면 switch에서 병목현상이 생기고 오류가 일어났을 경우 찾기가 더 
	힘들어진다. 

	반대로 패킷을 너무 세분화 한다면 헤더 데이터가 그만큼 많이 생기기 때문에 오버헤드가
	발생한다.

	inter - network(or internet)네트워크가 점점 커지면 어떻게할까?
	단순히 네트워크들끼리 붙이면 된다. 이럴 때 사용되는 네트워크 장비가 라우터이다.
	
	라우팅 : 목적지 주소에 따라 들어오는 패킷에 따라 이 패킷은 "어느 쪽 네트워크"에 보내줘야
	하는가 고민을 하고 보내주는 행위. 그리고 이러한 행위를 하는 네트워크 장비가 라우터이다.
		* 라우팅 알고리즘은 대표적으로 다익스트라가 있다.	

	문지기 라우터 : gateway router
	군대에서 아주 많이 들어봤던 게이트웨이가 이 게이트웨이구나.
	NAT와 연관지어 생각해보자.

	컴퓨터 네트워크의 목표는 무엇일까 :
		Universal Communication

	4개의 노드를 universal 하게 연결하려면 6개의 링크가 필요하다.
	하지만 이렇게 되면 O(n^2)의 시간복잡도 형태를 띄게된다.
	따라서 network는 hierarchical architecture의 형태를 띈다.

		ppt의 any to any connectivity 사진 참고.
		노드들이 공유하는 링크가 존재한다.
		이 링크를 효율적으로 공유하는 방법을 생각해야한다.

	network edge : 
		네트워크의 끝부분 : 랜선이나 와이파이, 기지국 등에 붙으면 망의 끝부분?에 
			붙는다. 그런 것들을 일컫는 것.
		직접 사용자가 맞닿아있는 그 첫부분을 말한다고 한다.(사용자가 직접적으로
		붙어있는 네트워크)

	network core : 
		네트워크의 중심부 : 개인이 알 필요까진 없지만 국가단위의 네트워크(기관 인프라)
		 

	프로토콜 : 물리적으로 떨어져있는 호스트들 끼리 통신을 하려면 특정한 규약이 필요하다.
		그런 것을 프로토콜이라고 한다.
		이메일을 예로 든다면 제목은 어떻게 하고, 본문은 ~~~ 등의 규칙이 있는데,
		이런 것은 기업이나 이런 곳에서 정의한 것이 아니라 전세계적으로(인터넷 표준) 프로토콜이
		정해져있는 것이다.
	
	http:// 다음으로 오는 주소를 요청하는 행위는 해당 웹사이트에 연결할 것을 요청하는 
		프로토콜을 지키는 것이다.

	Nuts and Bolts View 페이지 그냥 외우자.
	hosts = end systems. 네트워크 어플리케이션이 돌아가고 있는 기기
	end systems를 단말이라고 한다. 흔히 알고있는 단말기의 어원,.
	edge network와 연관지어 생각하면 된다.
	

	Access networks : 단말들이 네트워크에 붙게끔 해주는 네트워크
		ex) WI-FI, Ethernet, 셀룰러 등

	
	End systems connect to Access nettworks
		엔드 시스템들과 붙어있는 네트워크 

	ISP : SK, KT, LGU+등 인터넷을 제공해주는 회사, (Internet Service Provider)
	ISP는 개인에 국한되지 않고 기업, 정부 등에 인터넷을 제공하기도 한다.

	end to end : host to host와 비슷한 개념이다. 
	엔드시스템을 제공하는 access network들 끼리도 붙어있어야 한다. 서로 다른 access network가
	붙지 못한다면 internet이 실현될 수 없음. access network들끼리 또 다른 network를 형성한다.
	end to end는 말 그대로 access network들 끼리의 네트워크 통신이라고 보면 된다.

	그렇다면 access network은 어떻게 서로 연결될까. 여기서 core network가 나온다.
	core network이 이런 edge network(access network)을 묶어준다.
	
The Network Core
	
	circuit switching(회선교환)
	packet switching(패킷교환) 
	이 두가지가 core에서 가장 많이 쓰인다. 여기서 중요한 단어는 switching이다.
	주로 인터넷에는 패킷 스위칭이 쓰이고, 집전화 같은 경우에서 서킷 스위칭이 쓰인다.
	circuit switching은 기찻길같은 느낌, packet switching은 도로 위의 버스같은 느낌
	예를 들어 1번이 2번으로 갈려고 하는 경우 길이 미리 세팅이 되어있어야 한다.

	Circuit switching : 
		실제 데이터를 주고받기 전에 일종의 자원 예약을 먼저 하고 전용 선?을 쓴다.
		전화를 거는 것은 일종의 set up을 해주는 과정이다.
		만약 해당 선을 사용중이면 연결할 수 없다. 혹은 특정 링크에서 만들 수 있는
		서킷의 양이 초과했다면 셋업을 할 수 없다.
		(1번과 1-1번이 통화중이면 2번은 1-1번에게 링크할 수 없다, 
		특정 지역에 재난이 일어나면 해당 지역의 전화 트래픽이 증가하여 불통이 된다.)
	
		ppt에 processing delay at switch는 현재 서킷이 사용 가능한지 등을 판단하는
		delay이다. 반대로 accept 할때는 이런 딜레이가 없는데 이는 당연하게도
		판단할 필요가 없기 때문이다.
		tear down : 자원을 내려놓는 행위, 커뮤니케이션이 종료됐다면 서킷을 닫아줘서
		다시 사용 가능한 상태로 만들어주어야 한다.
			Circuit switching의 장점은 guaranteed service이다.
			단점의 경우 비효율적이라는 것이다. 자원의 독점 문제.

	★ Packet switching :
		라우터는 패킷을 수십 수백만개 계속 받는다. 그러면 라우터는 패킷의 헤드 부분을 보고
		길을 정해준다. = routing, 그리고 들어온 패킷을 내보내는 행동을 하는데, 이 행동을 하는
		것이 forwarding이다. 목적지를 생각만 해주는 것이 routing, 실제로 그 목적지로 패킷을
		보내주는 것이 forward이다.

			store and forward : 
				출발하는 곳을 source, 도착하는 곳을 destnation
				라우터는 한 패킷을 온전히 다 받은 다음 에러가 있는 지 없는 지 
				판단을 하고 (Store) 목적지로 내보내게 된다. (Forward)
				만약 패킷 길이가 L이고 라우터까지의 링크가 R bps라면 
				걸리는 시간은 L/R이다. 예제에서는 링크가 2개이므로 답은
				2L/R인데, 이러한 시간구조가 나오는 이유는 Store and Forward
				방식을 이용하기 때문이다.
				물론 약간의 시간 딜레이가 생긴다. 
			hop : 
				만약 돌다리에 돌이 3개가 있다면 4번의 hop을 하게된다.
				하나의 링크를 나타낼 때 그 링크를 지나는 것을 hop이라고 한다.
				즉 위의 예제에서는 one-hop delay가 L/R이 되는 것이다.
			
			라우터 : 
				라우터는 기본적으로 스위치의 확장판이다. 스위치보다 어떤 기능을
				더 수행할까?
					길찾기 기능 : routing 알고리즘에 의해서 길을 찾고 보내준다.
						-> routing과 forwarding

			타임 다이어그램 : ppt 참고하고,
				약간씩 생기는 시간 딜레이에 초점을 맞추자. 패킷이 약간 대각선 형태로
				기울어진건 패킷이 전송되면서 시간이 흐르는 것을 표현한 것이고, 노드에서
				시간이 조금씩 밀리는 것도 패킷 프로세싱 딜레이를 표현한 것이다.
				
				end to end delay : 패킷의 첫번째 비트가 출발할 때부터 마지막 비트가
				destination에 도착할 때 까지의 시간.

				패킷이 여러개가 됐을 때 시간 구하는 법 기억하기. pdf 참고

			* HOST의 정의 참고. a device running network application

			호스트가 네트워크를 사용하는 상태 : active
				사용하지 않는 상태 : idle
			active 상태의 비율은 높지 않다.
			일반적인 네트워크 기기는 active 한 시간과 idle한 시간의 비율이 정해져있다.
			만약 circuit switching에서 링크의 용량이 1Mb/s라면, 
			100kb/s인 유저 10명이 동시에 접속할 수 있다.

			packet switching에서는 35명 기준 10명 이상이 동시접속할 확률이 0.0004밖에 안된다.
			수업 중 이 확률 구하는 법은 안가르쳐주셨다.....

		서킷 과 패킷 중 뭐가 더 좋을까?
			패킷 스위칭이 slam dunk winner, 즉 압도적인 승리자이다.
			패킷 스위칭의 단점은 운영체제가 패킷을 정리하고(순서가 엉켜있다면 순서를 맞춰준다)
			보낸다. 따라서 운영체제는 굉장히 바빠진다. 
			
		패킷의 손실 : 
			라우터의 버퍼에서 만약 큐가 넘치게 된다면 패킷을 버리게 된다.
			(큐가 차는 과정은 pdf 참고)
			따라서 패킷의 loss는 주로 router의 queueing delay가 꽉 차다가 일어나게 된다.
			
		패킷의 전송 속도 : 
			책을 읽고 다른 사람에게 넘기는 예시 : 
				사람 간의 거리가 중요할까 사람이 책을 읽는 속도가 중요할까.
				당연히 사람이 책을 읽는 속도일 것이다. 네트워크도 같은 개념이다.
				네트워크 인터페이스 카드는 네트워크 정보를 초당 Rpb/s만큼 
				바꿔서 물리적인 링크로 보내준다. 이 변환 속도가 사람이 책을 읽는 속도이다.
			transmission time : 사진에서 A이다. 
			propagation delay : 사진에서 B이다.
			
			이 두개를 어떻게 구분할까? 
				Caravan analogy pdf 참고 : 
				
				카라반이 있고 이 카라반이 고속도로로 진입을 하려고 한다.
				카라반은 10대의 자동차로 이루어져있다.
				고속도로 진입 톨게이트의 100km 뒤에는 다른 톨게이트가 있다.
				이 톨게이트에서는 자동차가 티켓을 받든 뭘 하든 12초 정도의 시간이 걸린다.
				첫번째 자동차는 들어가는 데에는 12초가 걸리고, 두번째 톨게이트에 도착하는
				시간은 60분이다.  첫번째 차는 60분 12초가 걸린다.
				마지막 차는 총 62분이 걸린다. 즉 마지막차는 첫 톨게이트를 2분 걸려서 통과하고
				propagation time : 60분, transmission time은 2분이다.
				만약 시간당 100km가 아니라 1000km라면 transmission time은 그대로 2분이고,
				propagation time은 10분의 1로 6분이 된다. 감이 좀 오냐?

			queueing delay : 1분에 햄버거를 5개씩 만드는데 손님은 1분당 손님이 5.1명씩 온다면
					매장은 결국 운영될 수 없게된다. 
					만약 1분에 손님이 평균 4명이라면 큐잉 딜레이가 없을까?
					아니다. 평균 4명이기 때문에 5명이 넘는 순간이 오면 큐잉 딜레이가
					생긴다. 평균적으로, 처리양이 입력받는 양 보다 커야한다.
					
					pdf 참고 : La/R에서 traffic을 줄일려면 R을 늘리거나 a를 줄여야 하는데,
					R을 늘리는 것은 장기적인 문제이다. 비용도 크다. 따라서 a를 줄여야 하는데,
					이 a를 줄이는 것은 운영체제의 판단이고, 이것을 줄이는 프로토콜이 TCP이다.