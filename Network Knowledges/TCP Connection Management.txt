TCP에서 사용하는 연결 관리 방법에 대해 알아보겠다.

sender와 receiver 사이에 데이터를 주고 받기 위해 연결을 어떻게 만드냐
그리고 데이터 송수신이 끝난 뒤 연결을 어떻게 끊냐에 대해서 알아보겠다.

연결을 맺는 행위를 handshake라고 한다.
	sender와 receiver는 서로 handshake해서 연결을 맺는 것에 동의하고 매개변수 등을 
	프로토콜화 시킨다.

	3-way handshake
		1. 연결을 요청하는 클라이언트가 서버쪽으로 ip주소, 포트번호를 적고 사전에 
		예약된 special한 management packet을 보낸다. 이 패킷을 ★SYN패킷이라고 한다.
			syn패킷은 연결을 요청하는 패킷.

		2. 서버는 연결을 맺을 준비가 됐다면 syn ack을 보낸다.

		3. syn ack을 받은 클라이언트는 한번 더 이에 대한 ack을 보낸다.

		이 과정에서 필요한 parameter, 특히 initial sequence number를 알려준다.

	왜 3 way handshake를 쓸까? 왜 2 way handshake를 못쓸까?
		2-way handshake는 잠재적인 문제가 있다.

		구구절절 썼다가 지웠는데 ppt에 요약이 잘 되어있다.
		요점은 서버가 바쁠 때 ack을 보냈지만 클라이언트는 ack을 받기 전에 연결 요청을
		재전송한다. 여기서 클라이언트의 입장에서만 보면, 첫번째 요청에 반응해 늦게
		들어온 ack을 두번째 요청에 대한 ack으로 오인하여 데이터 송신을 시작할 수도 있다.
		
		결론 : two-way handshake를 사용하면 클라이언트와 서버가 서로 오해를 하는
		상황이 올 수 있다.

		해결책은 3-way handshake.
		
		
	syn packet을 보낼 때 initial sequence number를 같이 보낸다.
		initial sequence number는 0부터 시작하는 것이 아니라 random하게 뽑는 것.
		
		서버도 클라이언트에게 보낼 때 sequence number가 쓰이고, 그 정보를syn ack에
		담아서 보내준다. 

	initial sequence number를 어떻게 뽑을까?
		syn을 위해 랜덤하게 뽑은 수를 사용한다.
		그렇다면 왜 0부터 시작하지 않을까?
			특정한 포트 번호는 계속해서 재사용이 된다. 
			특정한 패킷이 특정한 포트 번호로 도착을 하는데 그때 sequence번호를
			이용해서 연속됐는 지 체크한다. 만약 0으로 시작됐고 현재는 끊긴
			연결에서 과거에 보낸 패킷이 온 것인지, 아니면 새로 연결을 맺은 패킷에서
			온 것인지 알 수가 없다. 
		그래서 0부터 시작하지 않고 랜덤으로 시작하는 것이다.
		과거의 연결에서 온 패킷과 구분하기 위해.

		랜덤으로 뽑는 로직은 시스템 내의 clock을 쓴다고 한다.
		

	SYN패킷이 손실되면 어떻게 될까?

		SYN-ACK이 언제 안올까.
			1. SYN이 loss됐을 때.
			2. SYN이 서버로 잘 갔지만 서버측에서 reject한 경우
		
		그렇다면 처음 보낸 SYN에 대해서는 sampleRTT 값이 없는데, 여기에 대해서는
		timeout 값을 어떻게 잡을까?
		TCP는 일반적으로 3-6초를 기다린다. (OS에서 정해둠)
			컴퓨터의 입장에서 3-6초는 굉장히 긴 시간이다.

Closing a TCP connection

	연결을 닫을 때는 SYN패킷이 아니라 FIN 패킷을 주고받는다.
	그리고 이 FIN  패킷은 4-way handshake이다.
	A가 FIN 패킷을 보낸다. 이 것의 의미는 "나는 더 이상 너에게 보낼 것이 없으니 
	connection을 닫겠다"이면서 "혹시 니가 나에게 보낼 데이터가 남아있으면 보내라"이다.
	FIN을 받은 B는 FIN에 대한 ACK을 보내고 보내야 되는 데이터를 전부 보낸다. 
	데이터를 다 보내면 FIN을 다시 A에게 보내고, A는 이를 받고 다시 ACK을 보낸 뒤 연결을 끊는다.
	
	그리고 만약 컴퓨터가 켜져있고 많은 어플리케이션이 켜져있는 상황에서 컴퓨터를 재시작한다
	하면 운영체제에서 모든 connection을 확 끊어버린다. 이 경우 남아있는 패킷을 반대편에게
	받을 필요가 없고, 이럴 경우 FIN 패킷 대신 RST(Reset) 패킷을 보내서 일방적인 통보를 한다.
		부가적으로 네트워크 프로그래밍에서 close()를 꼭 쓰라고 한다.  

네트워크의 태생적인 특성

	sender와 receiver는 패킷을 통해서, 패킷을 받아보고 상황에 대한 판단을 한다.
	이것에 대한 악용으로, 3 way handshake의 프로토콜을 이용해 상대방을 공격하는
	SYN flood attack이 있다. 
		sender가 response 주소를 엉뚱한 값으로 넣어두고 SYN을 보내면 서버는
		그 엉뚱한 주소로 SYN ACK을 보낸 뒤 ACK을 기다리기 위해 ready 상태로 
		자원을 hold 하고 있다. 하지만 ACK은 오지 않고 서버는 계속 hold를 함으로서
		과부하가 걸릴 수 있다. 