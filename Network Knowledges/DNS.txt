Domain Name System
	
	IP주소를 대신해서 도메인 네임을 이용해서 특정한 호스트를 access할 수 있게 도와주는 서비스.
	<복습>
	ip주소는 특정한 네트워크 혹은 호스트를 다른 곳과 구분하는 네트워크 ID같은 것
	===========================
	만약 우리가 네이버로 접속하고 싶은데 그럴 때 마다 네이버의 ip를 입력해서 접속해야 한다면 얼마나 불편할까?
	IP주소는 인터넷 네트워크 상에서 컴퓨터 하드웨어들이 훨씬 효율적으로 처리할 수 있다.
	하지만 사람에게는 불편하고, 사람들은 호스트 네임을 더 선호한다.
	즉, 사람은 호스트 네임을, 라우터와 같은 네트워크 장비들은 IP주소를 더 선호한다. 
	따라서 베스트는 사람에게는 호스트네임, 네트워크 장비에게는 IP주소를 주는 것이다.
	그리고 사람과 네트워크 장비 사이에 사람에게는 호스트 네임을, 네트워크 장비에게는 IP네임을 
	매핑, 매칭을 해주는 서비스가 바로 DNS이다. 

	DNS 비유 : 우리가 친구에게 전화를 걸 때 친구의 번호를 직접 누르지 않고 친구의 이름을 검색하여
		전화를 걸면 알아서 친구의 이름을 번호로 바꿔 전화를 걸어준다. DNS도 이런 것.
	
	DNS는 인터넷 상에 존재하는 공공 서비스이고, 그 서비스의 본질은 도메인 네임을 IP주소로 변환시켜주는
		어떠한 큰 데이터베이스를 관리하면서 사용자의 요청에 맞는 결과를 반환해주는 서비스,
		그런데 그 데이터베이스를 하나의 서버에 관리하는 것이 아니라 분산의 형태로 관리하는 서비스라고 한다.
		
		그리고 이 분산형 데이터베이스를 가지고 있는 DNS서버들이 전세계에 설치되어 있는데 그 서버들에게
		우리의 웹브라우저나 OS가 요청을 보내고, 그 요청을 보낼 때 지켜야 할 프로토콜이 필요하다.
			
		그렇다면 왜 분산 데이터베이스의 형태로 운영을 할까?
		why not centralized DNS?
			==> 동시에 얼마나 많은 사용자들을 서비스할거냐 라는 관점에서 바라보면 답을 찾을 수 있다.
			만약 하나의 서버로 한다면, 첫번째로 해당 서버에 문제가 생기면 전세계의 네트워크가 마비가 되고,
			두번째 유저의 요청이 굉장히 많을 텐데 그 많은 요청들을 특정한 한 서버로 모으게 된다면 문제가 생긴다.
			그리고 요청을 변환시키는 딜레이도 굉장히 길 것이다. + 유지보수 문제.
			+ 엄청 먼 곳에 있으면 느려진다.

		즉, DNS는 Distributed, Hierarchical database이다.
			분산되고, 계층적인 데이터베이스이다.
		여러종류의 Domain이 있다. 
		
		Generic Domain
			ex) .com .edu .net
		Country Domain
			ex) .kr .us .uk
		 
		각각의 도메인은 해당 도메인을 맡은 서버가 있다.
		ex) com DNS server는 .com으로 끝나는 도메인을 맡는다.
		그리고 이 도메인 서버에 모든 .com으로 끝나는 도메인의 IP주소가 저장되어있다.
			요점은 com서버에는 edu서버의 정보가 없다는 것.
		그리고 이러한 서버들의 상위에는 root dns server가 있다. (계층구조 데이터베이스인 이유)
		
		만약 www.amazon.com 이라는 주소를 변환해달라는 요청을 받았다면 제일 먼저 
		com이라는 DNS server 주소를 알아야 하기 때문에 Client는 root DNS server에게 com DNS server의 주소를
		받아온다. 그 후 com DNS server로 가서 amazon의 IP주소를 알려달라고 요청한다.
		그렇게 되면 com DNS server는 "아마존이 관리하는"(Authoritative DNS server) 아마존의 정보를
		저장해놓은 DNS server의 주소를 알려주고, 이 서버에서 Client는 amazon.com 으로 끝나는 모든
		정보를 검색하여 www.amazon.com 에 해당하는 주소를 받아온다.
		이 부분은 PDF 참고하면서 공부하자.
		 
		계층 구조 : Root DNS server -> Top-level DNS server(com DNS server는 여기에 해당)
		-> Authoritative DNS server(여기서는 아마존의 서버가 해당, 아마존은 아마존 내에 있는, amazon.com으로 
		끝나는 모든 호스트, URL의 정보를 가지고 있는데, 이를 기관 DNS server라고 한다.)
		-> Local DNS server

		로컬 DNS server는 우리가 어떤 DNS 변환 요청을 보내기 전에 사실 먼저 Local DNS server에게 물어본다.
		그 정보를 이미 알고있다면 바로 정보를 알려주는데 만약 모른다면 위의 과정을 통해 알아온다.
		즉 Local DNS server는 프록시와 같은 캐시의 역할을 한다.
		중요하다!

		requesting host -> local dns server -> root dns server -> top-level dns server ->authoritative dns server
		-> requesting host 의 순서로 접속이 이루어진다. 각 단계에서 요청을 하고 결과를 받는 것까지 생각하면
		총 8번의 요청과 반환이 이뤄진다.
		
		Iterated query : 
		연결된 서버들이 요청자한테 다른 서버의 주소를 알려주고, 그 서버는 또 다시 다른 서버의 주소를
		알려주고 하는 것을 Iterated query 라고 한다.
		pdf의 설명이 인상깊다. "I don't know this name, but ask this server"
		
		recursive query : 
		Iterated query는 특정 서버의 주소를 주면서 "나는 모르겠고 얘한테 가서 물어봐" 라는 느낌이라면
		recursive query는 "내가 가서 물어보고 알려줄게 잠깐만 기다려봐"의 느낌이다.
		요청자의 query를 그대로 특정 서버에 전달하고, 그 서버는 또 다시 특정 서버에 전달하고....
		끝에는 query가 해결이 되고, 또 타고 올라가서 해결이 되고 하는 과정을 겪음.

		이렇게 되면 오버로드가 커진다고 한다. 상위계층에 있는 DNS 서버들은 로드가 커질 수가 있는 문제가
		생길 수 있다고 함.
		
		DNS라고 하는 것은 결국엔 어떤 쿼리를 보내서 그 쿼리에 대한 답을 얻는 과정. 
		그렇다면 한번 요청이 와서 답을 줬는데 똑같은 결과를 묻는 쿼리가 다시 들어온다면 위 과정을 
		똑같이 거쳐서 다시 답을 줘야할까? 
		==> 이걸 해결할 수 있는 방법이 캐시일까? 만약 캐시를 이용한다면 발생할 수 있는 잠재적인 
		문제는 뭐가 있을까?

		일단 답은 캐시를 사용하긴 한다. 
		로컬 dns 서버가 캐시를 사용함으로서 root dns server나 top-level dns server의 부담이 많이 줄어든다.
		그런데 이렇게 했을 때 잠재적인 문제는! 만약 특정한 서버가 어떤 사정이 생겨 IP주소를 바꾸게 됐다면
		캐시는 그 업데이트 된 정보를 반영하지 못한다. 그렇기 때문에 캐시는 유효기간을 둔다.
		그리고 그 유효기간이 TTL(Time to Leave)인데, 캐싱을 할 때 이 정보를 같이 저장한다.
		그리고 그 기간이 expire되면 그 캐시 entry는 지워버린다. 
		TTL 중요
		
		DNS의 특징
		DNS는 위에서 쭉 다뤘지만 호스트의 이름을 아이피 주소로 변환해줌.
		host aliasing은 호스트의 별칭. 별칭은 다 다를 수 있지만 지칭하는 사람은 같듯이,
		어떤 특정한 IP주소를 갖는 호스트로 접속을 할 때 그 도메인 네임을 여러개 부여할 수 있다.
		sw.gachon.ac.kr과 ai.gachon.ac.kr이 모두 가천대 소프트웨어학과를 가리키게 할 수 있다는 것.
		mail server aliasing도 마찬가지로 같은 개념.
		load distribution
			DNS서버를 이용하여 부하를 분산시켜줄 수 있다. 
			네이버에 동시에 접속하는 사람이 몇십만 단위로 갈텐데, 네이버의 메인 페이지를 담당하는
			서버는 한대로는 절대 안될 것이다. 즉 서버가 여러 대 있을 것인데, DNS가 각각의 서버(원할한 서버)를 가리켜서
			이 부하를 분산시킬 수 있다. 

	
	만약 root dns server가 고장난다면?
		답은 스스로 찾으라는데 뭐냐 이거