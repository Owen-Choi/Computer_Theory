CIDR : Classless Inter Domain Routing

IPv4 : 2^32 개가 최대 ip 수이다. ==> 부족하다!
IPv6 : 다음 버전의 아이피 주소 체계이다.
	새로운 주소체계를 쓰면서 라우터를 더 효율적으로 만들 수 있게 하고 인터넷을 더 효율적으로 사용할 수 있는 것들을
	주소에 포함하면 좋겠다 라는 아이디어가 있음.

	★ipv6 : 128비트의 주소체계를 쓴다 시험 무조건 나옴.
		2 ^ 128
		==> 지구에 존재하는 모든 원자한테 ip를 할당해도 100개 이상의 지구에게 할당할 수 있을만큼 많은 수
	표현 길이를 좀 줄이기 위해 16진수를 사용
	4개의 16진수로 이루어진 8개의 그룹으로 나누어  나타낼 수 있다. 16진수 = 4bits
	즉 총 16진수의 수는 32개이다.


	IPv6는 이것이 구축되고 이후에 만들어진 network에 적용이 될 수 있다. 
	wifi를 쓰면 IPv4가 나오는데 LTE나 5G를 이용해서 게시판 등에 글을 쓰면  IPv6가 표시된다.
	걔네들은 IPv6가 나온 뒤 구축됐기 때문에.
	
	

	IPv6를 만들 때 무슨 이슈가 있었을까 
	호환성 이슈 : 
		만약 중국을 거쳐서 미국으로 가는 택배가 있는데, 중국은 영어를 못알아들으면?
		택배를 큰 박스로 감싸서 중국어로, 미국가는 택배라고 써놓는다
		즉 IPv6를 인식한다면 IPv4도 인식한다. 
		
		요약 : IPv4를 헤더처럼 앞에 붙여서 목적지? 를 알려준다.
			이것을 마치 캡슐에 담은 것 같다고 해서 capsulation이라고 한다.
			그리고 이 캡슐화된 IPv6가 목적지에 가기까지 IPv4 체계의 무언가를 터널처럼 지나가서
			이것을 tunneling이라고 한다. 	


		최근에는 5G 상용화로 인해 IPv6의 사용량이 30% 가량 늘었다.
		
	MiddleBoxes

		기본적으로 네트워크의 목적은 end to end communication
		firewall : 트래픽의 타입, 소스 등을 보고 패킷이 지나가지 못하게 막는 것.
		proxy 등.
		 중간에 보안등의 목적을 위해서 트래픽을 확인하고..? 못들었다.....  

	Middle box : 
		네트웤의 기본적인 기능은 정보를전달하는 것. end to end가 기본으로 되야하는 것
		만약 우리가 보낸 우편물을 중간에 누가 뜯어보고 열어보고 하면 우체국이 하는 일을 넘어서는 
		것이 돼버린다. 근데 만약 해외직구를 한다면 중간에 검사를 위해 포장을 뜯어보고 한다.
		네트웤에서도 비슷한 일이 일어난다. 중간에 라우터들이 목적지로 향하는 패킷을 포워딩만
		해줘서 열어보는 일은 없지만 중간중간 end to end 어플리케이션 중에서 이런 패킷들을 건드리는
		장비들이 있다. 일반적이고 표준화된 기능을 하는 네트워크 장비? 를 미들 박스라고 한다?

		프록시 서버가 어떻게 동작하는 지 사용자 입장에서 생각해보자.
			내가 인터넷을 사용한다고 생각했을 때 프록시서버에 붙어서 인터넷을 하고 있다는
			생각이 들까? 아니다. end system 들은 이렇게 소포를 뜯어봤음에도 인지를 못한다.
			
		미들박스를 쓰는 이유는 일단 효율성의 증가와 보안의 증가이다. 
		네트웤 중간중간에 라우터 말고도 이런 이익을 위한 장비들이 군데군데 존재한다.
		미들박스는 네트워크의 목표인 정보전달의 목적 말고도 부가적으로 여러 추가적인 기능을 수행
		그런 일련의 행동을 하는 것. 
		그리고 이것의 특징은 end system은 이것을 인지하지 못함. 중간에 실제로 존재하지만 엔드 시스템
		각각이 느끼기엔 이것이 있는지 모름. == 미들박스는 transparent하다.
		네트웤 장비 이외의 기능을 하는 장비들이 네트워크 레이어에 많이 들어가있다.
			==> 미들박스를 의미하는 듯.
	
	우리는 이 미들박스중에 NAT를 공부할 것이다.
		★시험문제로 냈다고 한다.
		
	Network Address Translation
		IPv4는 턱없이 부족함. 그래서 IPv6만듦. 
		장기적으로는 IPv6로 가야된다. 그러면 단기적으로 IPv4의 부족 문제를 어떻게 해결했을까?
		하나의 IP를 여러 device들이 공유해서 쓰는 방법을 모색했다.
		NAT기능을 통해서 한개의 IP주소를 통해서 여러명이 내부적으로 공유할 수 있게 만들 수 있다.
		실질적으로 IP주소를 라우터들이 처리할 때 유니크한 IP주소로 바라본다. (external IP, or public IP)
		서브넷 내에서 실제적으로 호스트들이 아이피 주소를 받을 때 public IP를 받는 게 아니라 private IP,
		즉 내부 아이피를 받는다.(누가 준다? DHCP가!)
		근데 이런 아이피를 쓰게 됐을 때 이 아이피를 들고가면 유니크하지도 않고 라우터들? 네트워크 장비들이
		알아먹지 못한다. 
		그러면 이 IP를 어떻게 쓸까. 게이트웨이같이 외부와 내부의 접점에 있는 기기들이 
		translation을 시켜준다. 
		
		외부 아이피 주소를 내부 아이피 중 한명으로 바꾸고 내부로 들여보내주면 전달이 된다.
		중간에 NAT가 나갈 때는 자기 껄로 바꿔주고 들어올때는 내부 IP를 주지만, 이 IP의 입장에서는
		그것을 인지하지 못한다. 그런데 이렇게 할 때 issue가 하나 있다.
		IP를 변환하고 복원하는 과정에서 IP가 여러개가 된다면 누가 누구인지 구분을 할 정보가 필요하다.
		
		일단 우리가 쓰고있는 IP는 private IP일 것이다. 와이파이를 쓴다면 거의 100% private이다.
		무선공유기가 DHCP의 기능도 같이 한다. 무선 공유기가 안쓰고 있는 IP주소를 할당하게 된다.
		클라이언트가 DHCP에게 broadcast할 때 포트는 OS가 임의로 할당해줌. 
	
		ppt에서 공유기가 2번에서 IP를 보낼 때 자기 IP주소를 쓴다(public). private을 쓰면 밖에서 
		아무도 알아먹지 못해 고아가 된다고 한다.
		내보내는 이유는 내부 ip의 외부 ip 변환인 것 같다. (들어온 ip가 다시 나감.)
		포트번호는?
		다른 private 중에서도 3345를 쓸 수도 있기 때문에 겹치지 않는 다른 번호로 할당을 해서 기억을 해야 한다.
		NAT translation table에 그 정보를 기록한다. IP주소와 포트번호를 기록.
		WAN side는 외부, LAN side는 내부 정보로 각각 매핑된다. 

	그래서 NAT 장비라고 하는 것은 NAT가 연결되어있는 어떤 서브넷이 있을 때 이 서브넷에서 바깥으로 
	나가는 IP가 있으면 어떻게 외부 아이피와 포트로 변환시켜야 할 지 확인한다. 그리고 정보가 있다면 대체시켜서 내보낸다.
	만약 외부 IP가 없는 경우라면(처음 온 경우라면) 테이블에 새로운 매핑내용을 추가하고 내보낸다. 
	왠만한 앤드시스템은 NAT 박스에 들어있다. 이것이 IP가 아직 부족하지 않은 이유.
	
	outgoing datagrams : NAT translation table에 의해 대체(replace)된다.
	remember : NAT translation table에 나간 IP주소와 그에 대한 내부 아이피의 변환값을 기억(저장)한다.
	incoming datagrams : replace : 나갔던 IP가 들어오면 다시 바꿔준다.

	만약 정상적으로 IP의 출타가 이뤄지지 않고 비정상적으로 나가게 된다면 IP는 계속 할당이 된 상태일까?
	DHCP처럼 lease time을 둔다. 

	private IP address ppt 슬라이드 외우기!!!!!
		중간고사에 나온다. 16 bit block, 20 bit block, 24 bit block

	NAT, DHCP가 물리적으로 따로 있는 하드웨어가 아니라 하나의 프로세스라고 생각하면 된다.
	그리고 NAT가 일상화되어있고 무선 랜 공유기 같은 것은 NAT의 기능이 있는 것이다.
	그리고 NAT와 DHCP는 왠만하면 같이 동작한다.
	

	Firewall

	Middle box의 한 종류.
	기본적으로 수행하는 일이 전송이나 표준에 의한 것이 아니라, 어떤 정보를 감지하고 보안을 위해
	다른 일을 하기 때문. 그리고 우리가 중간에 방화벽이 있는 줄 모른다. == transparent
	gateway : 192.168.0.1 처럼 보통 첫번째 IP를 쓴다. 
	모든 트래픽은 이 게이트웨이 라우터를 거쳐서 나가고 거쳐서 들어온다. 
	그렇기에 이 게이트웨이에 firewall이 같이 있는 경우가 많다. 
	트래픽이 내부로 들어갈 때 패킷의 헤더부분을 보고 들여보낼 지 말 지를 filtering해준다. 
	들여보낼 지 드랍할 지는 헤더를 보고 판단한다.
	
	SDN은 시험에 안나온다. 참고만 하자.
	아 몰라 ㅅㅂ 필기 안해