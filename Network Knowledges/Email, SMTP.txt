Electronic Mail(E-Mail)

	E mail은 대표적인 비동기적 소통이다.
		동기 비동기의 차이 알아둬야함.
	
	이메일을 구성하는 3가지 component가 있다.
	1. user agents (UA)
	2. mail servers
	3. simple mail transfer protocol(SMTP) : 이메일용 프로토콜.

	User Agent : 
		메일을 작성하고 도착한 메일을 읽고 메일을 편집하는 것과 관련됨.
		메일을 메일 서버에 보내고, 서버에서 오는 메일을 받아서 사용자에게 편리한 UI를 제공하며
		유저가 메일을 읽을 수 있게 해줌
	
	mail servers : 
		유저가 User Agent를 통해 서버로 메일을 보냄. 그러면 서버는 목적지를 보고 다시 또 목적지로
		메일을 보냄. 메세지 발송을 위한 버퍼가 있다. 그것이 message queue.
		메일발송이 실패하게 된다면 message queue에 재전송이 필요한 메세지들을 담아둠.

	예제를 통해 살펴보자.
		앨리스가 밥에게 메일을 보내고 싶어한다.
		밥의 메일 주소는 bob@someschool.edu이다.
		앨리스는 유저 에이전트를 통해 메일을 작성하고, 보내기 버튼을 통해 메일을 보내면
		앨리스의 메일 서버로 이메일이 보내진다.(이때 SMTP가 사용됨)
		그리고 앨리스의 메일 서버는 밥의 메일 서버에 접속하여 메일을 보낸다.(SMTP사용)
			==>밥의 메일 서버는 밥의 이메일 주소에서 @ 뒤 부분을 DNS를 통해 받아옴
		<추가내용>
		엘리스는 그녀의 서버로 SMTP를 이용?해서 메세지를 보내고, 이 메세지는 앨리스의 메일서버에 있는
		message queue에 저장되게 된다. 그 후 앨리스의 SMTP는 밥의 서버와 TCP연결을 맺고, 그 TCP연결을 이용해서
		메세지를 보낸다(send message over the TCP connection)

		밥의 메일 서버는 밥의 메일 박스로 해당되는 메세지를 옮길 것이고 추후에 밥이 
		유저 에이전트로 메일을 확인하면서 박스에 있는 메일을 읽게 됨.
		여기서 밥의 메일 서버와 앨리스의 메일 서버는 거리가 아무리 멀더라도 직접 연결을 맺게 된다.
		* SMTP는 이메일 메세지를 한쪽 어플리케이션에서 다른쪽 어플리케이션으로 전송하기 위해 만들어진 프로토콜.
		두 어플리케이션 사이에 메시지를 주고받기 위해 필요한 명령어들을 다 저장해둠.
		자신의 메일 서버로 메일을 보낼 때도 SMTP가 사용되고, 자신의 메일 서버에서 수신자의
		메일 서버로 메일을 relay할 때도 SMTP가 쓰인다. 

		그렇다면 SMTP는 TCP를 써야할까 UDP를 써야할까?
			==> 당연히 TCP. 절대로 데이터 손실이 일어나선 안된다. 
		
		메일 서버는 client, server 둘 다 될 수 있다. 당연한 얘기. 요청을 다른 메일 서버로 보낸다면
		client, 다른 메일 서버로부터 요청을 받는다면 server이다.

		메일의 연결 과정은 3단계로 축약할 수 있다.
			1. tcp연결을 맺고 smtp 연결을 맺었다라는 것을 확인하는 handshaking 단계.
			2. transfer of messages : 메시지를 보내는 과정.
			3. closure : 메시지를 보내고 연결을 끊는 과정

		HTTP와 SMTP는 유사점이 많다.
		HTTP는 클라이언트가 서버에 접속을 해서 서버에 있는 파일들, 오브젝트들을 끌어온다.
		(HTTP는 Pull protocol)
		반면에 SMTP는 클라이언트가 보내는 쪽 관점이다. 클라이언트가 서버에게 Push한다.
		(SMTP는 Push protocol)

		<추가내용>
		조금 더 소프트웨어적인 면에서 봤을 때 이 두 프로토콜간의 공통점  :
		both have ASCII command/response interaction, status codes. 
		둘 다 ASCII 코드로 이루어진 명령어/반응 interaction과 상태 코드를 가지고 있다.

		그렇다면 왜 메일 서버끼리 메일을 주고받아야 할까?
		사용자의 메일 서버에서 바로 수신자의 유저 에이전트로 메일을 보낼 수는 없을까? ... 1
		사용자가 바로 수신자의 메일 서버로 (사용자의 메일 서버를 거치지 않고) 보낼 수는 없을까? ....2
		
	
		1 : 유저 에이전트의 네트워크 정보는 우리가 생각하는 고정적인 것이 아니기 때문에 이 정보를 받아오는 데에서
		여러 문제가 생길 수 있고, 또 유저 에이전트가 메일을 받기 위해서 always-on 환경을 유지를 해야한다.	
		만약 스마트폰을 메일을 받기 위해서 항상 켜놓는건 말이 안된다.

		2. 수신자의 메일 서버가 여러 이유에 의해서 연결이 안될 수도 있고 연결이 되더라도 특정한
		유저한테 보내는 그 부분이 메일함이 꽉 차거나 하면 제대로 동작을 안할 수도 있다.
		전달이 제대로 안되는 경우에 2번 접근법을 통해서 하게 되면 유저 에이전트가 이에 대한 대응을 하기가 힘들다.
		또한 보안 Issue도 있을 수 있다.

		그렇다면 어떻게 밥의 유저 에이전트가 메일을 가져올까?
		이 부분은 push protocol인 SMTP와는 다르게, 밥이라는 유저가 자신의 서버인 밥 서버에
		access를 해서 메일을 당겨오는(pull protocol)과정을 가져야 한다. 이것이 훨씬 더 합리적인 방법이라고 한다.
		이 부분이 메일을 보내는 과정에서 조금 특이한 부분이다. 이 부분은 SMTP가 아니라 별도의 프로토콜이 필요하다.
		다음은 그 프로토콜들이다.
			POP3, IMAP(POP3를 약간 개선), Web-based E-mail(전용 유저 에이전트를 쓰지 않고 웹 브라우저에서 메일을 긁어오는 프로토콜?)
			POP3 프로토콜 : 서버 쪽에서는 클라이언트가 요청한 COMMAND를 통해 소통함.
					굉장히 간단한 프로토콜이다. 디렉토리 이런 건 없고 그냥 나한테 온 메일이 뭐가 있나 하고 LIST 명령어를 치면
					메일을 쭈욱 보여주는, stateless한 프로토콜이다.
			반면에 POP3를 조금 더 개선한 IMAP은 POP3에다가 메일을 조금 organize할 수 있는 디렉토리를 만들어서 검색, 디렉토리 간 이동 등의
			명령어가 추가된 버전이라고 할 수 있다. 1번 디렉토리는 업무, 2번 디렉토리는 친구 등 이런 식으로.